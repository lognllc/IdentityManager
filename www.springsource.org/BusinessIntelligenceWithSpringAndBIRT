<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Spring Framework &amp; BIRT | SpringSource.org</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="shortcut icon" href="/sites/all/themes/s2org11/favicon.ico" type="image/x-icon" />
  <link type="text/css" rel="stylesheet" media="all" href="/modules/aggregator/aggregator.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/node/node.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/system/defaults.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/system/system.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/system/system-menus.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/user/user.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/cck/theme/content-module.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/ctools/css/ctools.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/custom/google_cse/google_cse.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/date/date.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/filefield/filefield.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/nice_menus/nice_menus.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/zen/framework/nice_menus.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/prettify/styles/drupalorg.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/cck/modules/fieldgroup/fieldgroup.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/views/css/views.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/html-reset.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/wireframes.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/layout-fixed.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/page-backgrounds.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/tabs.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/messages.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/pages.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/block-editing.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/blocks.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/navigation.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/panels-styles.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/views-styles.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/nodes.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/comments.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/forms.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/fields.css?R" />
<link type="text/css" rel="stylesheet" media="print" href="/sites/all/themes/s2org11/css/print.css?R" />
<!--[if IE]>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/ie.css?R" />
<![endif]-->
<!--[if lte IE 6]>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/ie6.css?R" />
<![endif]-->
  <script type="text/javascript" src="/misc/jquery.js?R"></script>
<script type="text/javascript" src="/misc/drupal.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/superfish/js/superfish.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/superfish/js/jquery.bgiframe.min.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/superfish/js/jquery.hoverIntent.minified.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/nice_menus.js?R"></script>
<script type="text/javascript" src="/sites/all/libraries/prettify/src/prettify.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/prettify/prettify.loader.js?R"></script>
<script type="text/javascript" src="/sites/all/themes/s2org11/js/navigation.js?R"></script>
<script type="text/javascript" src="/sites/all/themes/s2org11/js/popup.js?R"></script>
<script type="text/javascript" src="/sites/all/themes/s2org11/js/elqNow/elqCfg.js?R"></script>
<script type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "basePath": "/", "nice_menus_options": { "delay": 800, "speed": 1 }, "prettify": { "linenums": false, "match": ".content", "nocode": "no-code", "custom": [  ], "markup": { "code": true, "pre": true, "precode": false } } });
//--><!]]>
</script>
</head>
<body class="page not-front not-logged-in node-type-page no-sidebars page-businessintelligencewithspringandbirt section-businessintelligencewithspringandbirt page-panels">

	  


<!--begin custom navigation-->
      	  
<!--[if (IE 6)|(IE 7)|(IE 8)]>
<div style="height:97px;margin-top:0px;background: #457228;">
<![endif]-->

<div style="height:97px;margin-top:0px; background: url('http://www.springsource.org/sites/all/themes/s2org11/images/BG_SiteHeader_Glow.png') no-repeat scroll center top, url('/files/homepage/BG_SiteBillboardAndHeader_50.png') repeat-x scroll 0 0 #367B09;">

    <div id="top">
  		<div style = "height:80px;margin-top:0px;background: url('/files/homepage/BG_SiteTopNav_new.png') repeat-x scroll 0 0 #F1F1F1;
  	-moz-border-radius: 0 0 5px 5px;
    -webkit-border-bottom-left-radius: 5px;
    -webkit-border-bottom-right-radius: 5px;
    border-radius: 0 0 5px 5px;
-moz-box-shadow: 0 0 15px #333;
-webkit-box-shadow: 0 0 15px#333;
box-shadow: 0 0 15px #333;">
<div style="margin-left:10px;margin-right:10px;">
 	          <table valign="top" height="80" style="font-size:14px;text-transform:uppercase;color:#666;margin:0;">
	          <tr>
	          
	          <td>
	           <a href="/"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/logo_springsource_community.png"></a>
	           </td>
	           <td width="5">&nbsp;</td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                  <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/features" onmouseover="mouseOver1()" onmouseout="mouseOut1()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_features.png" id="b1"></a><br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                 <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/get-started" onmouseover="mouseOver2()" onmouseout="mouseOut2()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_getstarted.png" id="b2"></a><br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                 <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/get-involved" onmouseover="mouseOver3()" onmouseout="mouseOut3()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_getinvolved.png" id="b3"></a></br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                 <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/news-events" onmouseover="mouseOver4()" onmouseout="mouseOut4()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_newsevents.png" id="b4"></a><br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td width="7" align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>

	           <td align="center">

	      	  
        <div id="search-box" style="border-bottom: 1px solid #E2E2E2;">
          <form action="/search/google" method="get" id="search-theme-form">
            <div><div id="search" class="container-inline">

              <input type="text" maxlength="128" size="16" name="query" value="Search" style="border: 1px solid #CCCCCC;margin-bottom:10px;margin-left: 2px;color:#999999" class="form-text" onblur="this.value = this.value || 'Search'; this.style.color = '#999999';" onfocus="if(this.value=='Search') {this.value='';} this.style.color = '#999999';" />
                          
              <input type="hidden" name="output" value="xml_no_dtd" />
              <input type="hidden" name="client" value="google-csbe" />
              <input type="hidden" name="cx" value="009687201310241541466:zerjfa_shxo" />
              <input type="hidden" name="ie" value="utf-8" />
              <input type="hidden" name="oe" value="utf-8" />
              <input type="hidden" name="op" value="Search" />
            </div></div>
          </form>
        </div>
               <div id="subscribe" style="color: #7E7E7E;float: left;padding-top: 5px;padding-left: 10px;border-top: 1px solid whiteSmoke;">
              <a href="/newsletter-subscription" style="color: #7e7e7e;background:url(/files/header/nav_subscription_off.gif) 3px 2px no-repeat" onmouseover="this.style.background = 'url(/files/header/nav_subscription_on.gif) 3px 2px no-repeat';this.style.textDecoration = 'none'" onmouseout="this.style.background = 'url(/files/header/nav_subscription_off.gif) 3px 2px no-repeat';this.style.textDecoration = 'none'">
                  <span style="padding-left:23px">Subscribe</a>
              </a>
        </div>
        

		      </td>
		      
		      </tr>
	      </table>
</div>
  		
              </div></div></div>

<!--[if (IE 6)|(IE 7)|(IE 8)]>
 </div>
<![endif]-->
<!--end custom navigation-->



  <div id="page-wrapper"><div id="page">

  
    <div id="header"><div class="section clearfix">

      
<div id="name-and-slogan">

</div>

      
      


    </div></div><!-- /.section, /#header -->

    <div id="main-wrapper"><div id="main" class="clearfix">

      <div id="content" style="margin-left:10px;margin-right:10px;" class="column"><div class="section">


        
        
        <!-- <div class="breadcrumb"><a href="/">Home</a> › </div> -->

	  
	  
	  
                        

       <table width="100%" >
       <tr>
     <td width="100%" valign="top" align="left">
       <div style="width:100%">
       
 <div id="content-area">

	<div style="margin-top:-20px;">
	<!--[If IE 7]><br><![endif]-->

<table>
<tr>
<td width="95%">
	  <h1 class="title" id="page-title">Spring Framework &amp; BIRT</h1>
</td>
<td align="right">
      <a class="a2a_dd" href="http://www.addtoany.com/share_save" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/button_share.png"></a>
<script type="text/javascript">
var a2a_config = a2a_config || {};
a2a_config.color_main = "e5e6e6";
a2a_config.color_border = "5c6c75";
a2a_config.color_link_text = "333333";
a2a_config.color_link_text_hover = "333333";
var a2a_config = a2a_config || {};
a2a_config.onclick = 1;
</script>
<script type="text/javascript" src="http://www.wavemaker.com/_js/addtoany.js"></script>
</td>
</tr>
</table>
	  <p>
	  	  </p>

           <div id="node-3384" class="node node-type-page build-mode-full"><div class="node-inner">

  
  
  
  
  <div class="content">
    <p>By Jason Weathersby and Josh Long</p>
<div style = "float:right;border:1px solid black;margin: 10px;padding:10px">
<h2 style = "font-size:smaller;">Table of Contents </h2>
<p> 	<a href="#intro">Introduction</A><br />
	 <a href="#thesamplecode">The Sample Code</A><br />
	 <a href="#frommvc">Calling the BIRT Engine from Spring MVC</A><br />
	 <a href="#birtviewer">Accessing Spring Beans from the BIRT Viewer</A><br />
	 <a href="#remotebeansfrombirt">Using Remoting to Access Beans from a BIRT Report</A><br />
	 <a href="#conclusion">Conclusion</A><br />
	 <a href="#attachments">Attachments</A></p>
<h2 style = "font-size:smaller;">Downloads</h2>
<p><a href="http://www.springsource.org/files/birt/SpringandBirtCoreJar.zip">SpringandBirtCoreJar.zip</a><br />
<a href="http://www.springsource.org/files/birt/SpringBirtArticleSamples.zip">SpringBirtArticleSamples.zip</a><br />
</DIV></p>
<h2 name = "intro">Introduction</h2>
<p>Eclipse’s Business Intelligence and Reporting Tools (BIRT) project is an open-source project based on the popular Eclipse IDE. The BIRT project had its first major release in the summer of 2005 and has garnered over ten million downloads since its inception.  The project was started by Actuate Corporation which uses BIRT as the basis for many of its commercial products.  The <a href="http://www.eclipse.org/birt" target="_blank">BIRT project's site</a> includes an introduction, tutorials, downloads, and examples of using BIRT.</p>
<p>Developers use BIRT to build and deploy reports in a Java/Java EE environment.    In BIRT 3.7, a new POJO-based runtime environment is available that makes deployment of the BIRT engine much simpler.  This article discusses several BIRT integration scenarios that use components from the Spring Framework.</p>
<p><IMG SRC="http://www.springsource.org/files/BIRT3.7SpringIntegrationVersion7_html_6002ca03.png" ALIGN=BOTTOM WIDTH=576 HEIGHT=315 BORDER=0><br />
Figure 1 – BIRT Collage</p>
<p>The BIRT project includes the following key components:</p>
<ul>
<li>BIRT Designer - The developer tool used to design reports.</li>
<li>Web Viewer - A sample Java web application used to deploy reports. This viewer contains a JSP-tag library that facilitates integration with existing web applications.</li>
<li>BIRT Engines - The Design and Report engines used to construct, run, and render a BIRT report. </li>
<li>BIRT Charts - A package that supports building and running highly sophisticated interactive charts.</li>
</ul>
<p>The Spring framework is a popular collection of architectural and implementation approaches that makes enterprise Java development easier. Core parts of this framework are Dependency Injection and Aspect Oriented Programming. These are exploited in order to reduce coupling between the infrastructure-specific parts of an application and the business functionality that is its prime goal. The Spring framework is developed in an open source way by the SpringSource business unit within VMware (the original SpingSource company was acquired by VMware in 2009). It is in very wide use in the Java developer community and executes on all platforms, including VMware’s supported flavor of Tomcat, called tcServer.</p>
<p>While the Spring Framework offers many useful features, most questions regarding integration with BIRT revolve around Spring MVC and Spring bean access within a report.  This article covers three scenarios: </p>
<ul>
<li>Integrating the BIRT engines in Spring MVC</li>
<li>Accessing Spring beans from the BIRT Viewer</li>
<li>Using Spring Remoting to access Spring Beans from a BIRT report</li>
</ul>
<p>This article assumes the reader has programming knowledge of both BIRT and the Spring Framework. To learn more about the Spring framework, check out the <a href="http://blog.springsource.org/category/green-beans/">“Green Beans” blog series</a>.</p>
<p>Each scenario has an associated example attached to this article that was built and tested using the following components: </p>
<ul>
<li><A href = "http://www.springsource.org/download">Spring Framework 3.1.0</a>    </li>
<li><a href="http://download.eclipse.org/birt/downloads/">BIRT 3.7.1 </a></li>
<li><a href ="http://ant.apache.org/bindownload.cgi">Apache Ant 1.7.1</A></li>
<li><a href="http://tomcat.apache.org/download-60.cgi">Apache Tomcat 6.0.20</a></li>
</ul>
<p>These examples are meant to be illustrative and contain very little error checking.</p>
<h2><a name ="thesamplecode">The Sample Code</a></h2>
<p>Throughout this article, the different integration scenarios refer to a generic Spring bean that supplies data to a BIRT report.  The Spring Framework contains many sophisticated data access components, but this simple example is a useful learning tool for more complicated scenarios.  Within the example code, there are two packages: <em>org.eclipse.birt.spring.example</em> and <em>org.eclipse.birt.spring.core</em>.  The example package contains simple code that can be replaced with your own data access objects.  The core package contains a Spring View for running and rendering BIRT reports, A parameter converter class that converts report parameters entered in the URL to the appropriate BIRT report parameter type, and a BIRT engine Factory which supplies the Report Engine to other beans.  The example classes are shown below and are used throughout this article.  The core classes are described in the next section.</p>
<p>We start with a simple POJO that will be used within our BIRT reports.  It is named Car and contains simple properties for describing a car.</p>
<pre> 
package org.eclipse.birt.spring.example;

public class Car{
	private String make;
	private String model;
	private String year;
	public String getMake() {
		return make;
	}
	public void setMake(String make) {
		this.make = make;
	}
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public String getYear() {
		return year;
	}
	public void setYear(String year) {
		this.year = year;
	}
	public Car() {

	}
	public String toString(){
		return "Make:--"+this.make+" Model:--"+this.model+" Year:--"+this.year;
	}
	public String getCarString(){
		return( this.toString() );
	}
}
</pre><p>
The example provides a service class to load up several Car POJOs to use for reporting purposes.</p>
<pre> 
package org.eclipse.birt.spring.example;
import java.util.*;

public class CarServiceImpl implements CarService {

	public List<CarPojo> getAllCars (){
		Car car1 = new Car();
		car1.setYear("2000");
		car1.setMake("Chevrolet");
		car1.setModel("Corvette");
		Car car2 = new Car();
		car2.setYear("2005");
		car2.setMake("Dodge");
		car2.setModel("Viper");
		Car car3 = new Car();
		car3.setYear("2002");
		car3.setMake("Ford");
		car3.setModel("Mustang GT");
		List<Car> cars = Arrays.asList(  car1, car2, car3 ) ;
		return cars ; 
		

	}
}
</pre><p>
To make this service available within the Spring Context we use a simple class, configured with Spring Annotations.</p>
<pre> 
package org.eclipse.birt.spring.example;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


@Configuration
public class BirtDataServiceConfiguration {

	@Bean 
	public CarService carService(){ 
		return new CarServiceImpl(); 

	}
} 
</pre><h2><a name= "frommvc">Calling the BIRT Engine from Spring MVC</a></h2>
<p>There are many ways to integrate the BIRT engines into Spring, and Spring MVC in particular. For this example we have implemented a Spring View that uses parameters to determine the report and output format that a user desires.  The BIRT report engine is injected into the View to do the actual running and rendering of the report.  </p>
<p>The BIRT engine can be used by multiple threads, but it is generally expensive to startup. Ideally, we only want to start the BIRT engine once for the life of the application.  We also want to shutdown the engine properly when the application shuts down. With this in mind, we first create a <b>BirtEngineFactory</b> class that acts as a factory bean which can be used by other beans to return an instance of the BIRT report engine. In Spring the <b>FactoryBean</b> interface is a smart constructor for complex objects. It has one important contract: to return a ready-to-use object from its <b>getObject</b> method.  </p>
<pre> 
package org.eclipse.birt.spring.core;

import java.io.File;
import java.io.IOException;

import org.eclipse.birt.core.exception.BirtException;
import org.eclipse.birt.core.framework.Platform;
import org.eclipse.birt.report.engine.api.EngineConfig;
import org.eclipse.birt.report.engine.api.IReportEngine;
import org.eclipse.birt.report.engine.api.IReportEngineFactory;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.FactoryBean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.core.io.Resource;
import org.springframework.util.Assert;


/**
Factory bean for the instance of the {@link IReportEngine report engine}.
 */
public class BirtEngineFactory implements FactoryBean<IReportEngine>, ApplicationContextAware, DisposableBean {  

	public boolean isSingleton(){ return true ; } 

	private ApplicationContext context ; 
	private IReportEngine birtEngine ;	
	private Resource logDirectory ;
	private File _resolvedDirectory ;
	private java.util.logging.Level logLevel ; 

	public void setApplicationContext(ApplicationContext ctx){
		this.context = ctx; 	
	}

	public void destroy() throws Exception {
		birtEngine.destroy();
		Platform.shutdown() ;
	}

	public void setLogLevel(  java.util.logging.Level  ll){
		this.logLevel = ll ;
	}

	public void setLogDirectory( org.springframework.core.io.Resource resource ){
		File f=null;
		try {
			f = resource.getFile();
			validateLogDirectory(f);
			this._resolvedDirectory = f ;
		} catch (IOException e) {
			throw new RuntimeException( “couldn’t set the log directory”);
		} 

 
	}

	private void validateLogDirectory (File f) {
		Assert.notNull ( f ,  " the directory must not be null");
		Assert.isTrue(f.isDirectory() , " the path given must be a directory");
		Assert.isTrue(f.exists() , "the path specified must exist!");	
	} 

	public void setLogDirectory ( java.io.File f ){ 
		validateLogDirectory(f) ;
		this._resolvedDirectory = f; 
	}

	public IReportEngine getObject(){ 

		EngineConfig config = new EngineConfig();
		
		//This line injects the Spring Context into the BIRT Context
		config.getAppContext().put("spring", this.context );
		config.setLogConfig( null != this._resolvedDirectory ? this._resolvedDirectory.getAbsolutePath() : null  , this.logLevel);
		try {
			Platform.startup( config );
		}
		catch ( BirtException e ) {
			throw new RuntimeException ( "Could not start the Birt engine!", e) ;
		}

		IReportEngineFactory factory = (IReportEngineFactory) Platform.createFactoryObject( IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY );
		IReportEngine be = factory.createReportEngine( config );
		this.birtEngine = be ; 


		return be ;
	}

	@Override
	public Class<?> getObjectType() {
		return IReportEngine.class;
	}
}
</pre><p>
This class also implements the <b>DisposableBean</b> interface so that the engine can be shutdown properly when the application closes. As the Spring ApplicationContext is shutdown, Spring will call the <b>DisposableBean#destroy</b> method on all beans that implement DisposableBean. Our implementation calls the destroy method. Finally, this class implements the <b>ApplicationContextAware</b> interface to receive an instance of the Spring <b>ApplicationContext</b>. We store the ApplicationContext and then pass it to the BIRT Report Engine using the following code:</p>
<pre> 
		EngineConfig config = new EngineConfig();
	
		//This line injects the Spring Context into the BIRT Context
		config.getAppContext().put("spring", this.context );
</pre><p>
This code will allow the Spring Context objects to be accessed from within BIRT Scripting and Expressions.</p>
<p>Next we create a Spring View that runs and renders the report. This View expects the BIRT report engine to be injected. The View searches the request for ReportName and ReportFormat parameters to decide which report to run and what format is required. The request is also searched for report parameter names.  If found these report parameters are set to the appropriate values. A portion of this View is presented below. See the example code for more information.</p>
<pre> 
/**
 * BirtView is used to run and render BIRT reports.
 * This class expects the request to contain a ReportName and ReportFormat
 * parameter. In addition Report parameters are automatically searched for in the
 * the request object.
 */
public class BirtView extends AbstractView {


	public static final String PARAM_ISNULL = "__isnull";
	public static final String UTF_8_ENCODE = "UTF-8"; 

	private IReportEngine birtEngine;
	private String reportNameRequestParameter = “ReportName” ; 
	private String reportFormatRequestParameter = “ReportFormat” ; 
	private IRenderOption renderOptions ; 

	public void setRenderOptions(IRenderOption ro) { 
		this.renderOptions = ro;
	} 
	
	public void setReportFormatRequestParameter( String rf ){ 
		Assert.hasText( rf , “the report format parameter must not be null”) ;
		this.reportFormatRequestParameter = rf ;
	}

	public void setReportNameRequestParameter ( String rn ) { 
		Assert.hasText( rn , “the reportNameRequestParameter must not be null”) ;
		this.reportNameRequestParameter = rn ; 
	}

	protected void renderMergedOutputModel(
			Map map, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		String reportName = request.getParameter( this.reportNameRequestParameter );
		String format = request.getParameter( this.reportFormatRequestParameter );
		ServletContext sc = request.getSession().getServletContext();
		if( format == null ){
			format="html";
		}
		IReportRunnable runnable = null;
		runnable = birtEngine.openReportDesign( sc.getRealPath("/Reports")+"/"+reportName );
		IRunAndRenderTask runAndRenderTask = birtEngine.createRunAndRenderTask(runnable);
		runAndRenderTask.setParameterValues(discoverAndSetParameters( runnable, request ));


		response.setContentType( birtEngine.getMIMEType( format ));
		IRenderOption options =  null == this.renderOptions ? new RenderOption() : this.renderOptions;		
		if( format.equalsIgnoreCase("html")){    
			HTMLRenderOption htmlOptions = new HTMLRenderOption( options);
			htmlOptions.setOutputFormat("html");
			htmlOptions.setOutputStream(response.getOutputStream());
			htmlOptions.setImageHandler(new HTMLServerImageHandler());
			htmlOptions.setBaseImageURL(request.getContextPath()+"/images");
			htmlOptions.setImageDirectory(sc.getRealPath("/images"));
			runAndRenderTask.setRenderOption(htmlOptions);

		}else if( format.equalsIgnoreCase("pdf") ){
			PDFRenderOption pdfOptions = new PDFRenderOption( options );
			pdfOptions.setOutputFormat("pdf");
			pdfOptions.setOption(IPDFRenderOption.PAGE_OVERFLOW, IPDFRenderOption.FIT_TO_PAGE_SIZE);
			pdfOptions.setOutputStream(response.getOutputStream());
			runAndRenderTask.setRenderOption(pdfOptions);
		}else{

			String att  ="download."+format;
			String uReportName = reportName.toUpperCase(); 
			if( uReportName.endsWith(".RPTDESIGN") ){ 
				att = uReportName.replace(".RPTDESIGN", "."+format);
			}	
			response.setHeader(	"Content-Disposition", "attachment; filename=\"" + att + "\"" );
			options.setOutputStream(response.getOutputStream());
			options.setOutputFormat(format);
			runAndRenderTask.setRenderOption(options);
		}
		runAndRenderTask.getAppContext().put( EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST, request );
		runAndRenderTask.run();	
		runAndRenderTask.close();		

	}
	public void setBirtEngine(IReportEngine birtEngine) {
		this.birtEngine = birtEngine;
	}
.
.
</pre><p>
To setup Spring MVC (and use this new View within our application) we need to create a Spring @Configuration class with the @EnableWebMVC annotation. To override parts of the Spring MVC machinery, we can simply extend a base class  -WebMvcConfigurerAdapter - and hook into the appropriate callback method. This class is a regular Spring @Configuration class, as we saw before when configuring the services. We use the @ComponentScan annotation to tell Spring to register the annotated beans from our two packages to the Spring context. Next we override the <b>addViewControllers</b> method to tell Spring that URLs ending in ” /reports” should be delegated to the new Birt Spring MVC <b>View</b>. The birtView and BIRT engine are created as beans and the <b>birtEngine</b> property of the BirtView bean is set.</p>
<pre> 
package org.eclipse.birt.spring.example;

import org.eclipse.birt.spring.core.BirtEngineFactory;
import org.eclipse.birt.spring.core.BirtView;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.BeanNameViewResolver;

@EnableWebMvc 
@ComponentScan( {"org.eclipse.birt.spring.core", "org.eclipse.birt.spring.example"})
@Configuration
public class BirtWebConfiguration  extends WebMvcConfigurerAdapter  {

	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/reports").setViewName("birtView");

	}

	@Bean 
	public BirtView birtView(){ 
		BirtView bv = new BirtView(); 
		bv.setBirtEngine( this.engine().getObject() );
		return bv; 
	}


	@Bean public BeanNameViewResolver beanNameResolver(){ 
		BeanNameViewResolver br = new BeanNameViewResolver() ;
		return br; 
	} 

	@Bean
	protected BirtEngineFactory engine(){ 
		BirtEngineFactory factory = new BirtEngineFactory() ;  
		//Enable BIRT Engine Logging
		//factory.setLogLevel( Level.FINEST);
		//factory.setLogDirectory( new FileSystemResource("c:/temp"));

		return factory ; 
	}


}
</pre><p>
As stated earlier when describing the BIRT engine factory class we provide a reference to the Spring <b>ApplicationContext</b> from the BIRT context. The BIRT context object is nothing more than a Map of Objects that the BIRT engine makes available to downstream processes, such as BIRT expressions, BIRT event handlers, etc.  BIRT uses the Rhino JavaScript engine to process BIRT expressions and to evaluate JavaScript event handlers. The BIRT context is preloaded into the script environment with the Rhino engine objects. This object allows a report developer to retrieve a Spring bean and use it in an expression or event script using the following syntax:</p>
<pre> 
var mypojo = spring.getBean("carService");
mypojo.getAllCars() ().get(0);
</pre><p>
If you do not want to inject the Spring context into the BIRT application context, you can always use JavaScript similar to the following code to access Spring beans in BIRT expressions and JavaScript event handlers:</p>
<pre> 
importPackage(Packages.org.springframework.context);
importPackage(Packages.org.springframework.web.context.support );
//ServletContext
var sc = reportContext.getHttpServletRequest().getSession().getServletContext();
//ApplicationContext 
var spring = WebApplicationContextUtils.getWebApplicationContext(sc);
var mypojo = spring.getBean("carService");
this.text = mypojo.getAllCars().get(0).getMake();
</pre><p>
To run this web application, add the JAR files from the downloaded BIRT 3.7.1 runtime, birt-runtime-3_7_1\ReportEngine\lib directory, to the WEB-INF/lib of the webapp. You will also need the following JAR files from Spring Framework download in WEB-INF/lib:</p>
<ul>
<li>cglib-nodep-2.2.2.jar</li>
<li>org.springframework.aop-3.1.0.RELEASE.jar</li>
<li>org.springframework.asm-3.1.0.RELEASE.jar</li>
<li>org.springframework.beans-3.1.0.RELEASE.jar</li>
<li>org.springframework.context.support-3.1.0.RELEASE.jar</li>
<li>org.springframework.context-3.1.0.RELEASE.jar</li>
<li>org.springframework.core-3.1.0.RELEASE.jar</li>
<li>org.springframework.expression-3.1.0.RELEASE.jar</li>
<li>org.springframework.web.servlet-3.1.0.RELEASE.jar</li>
<li>org.springframework.web-3.1.0.RELEASE.jar</li>
</ul>
<p>The example that accompanies this article has the following web.xml:</p>
<pre>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd"&gt;
&lt;web-app&gt;

 &lt;servlet>
   &lt;servlet-name&gt;springandbirt&lt;/servlet-name&gt;
   &lt;servlet-class&gt;
     org.springframework.web.servlet.DispatcherServlet
   &lt;/servlet-class&gt;
   &lt;init-param&gt;
     &lt;param-name&gt;contextClass&lt;/param-name&gt;
     &lt;param-value&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;/param-value&gt;
   &lt;/init-param&gt;   
   &lt;init-param&gt;
     &lt;param-name>contextConfigLocation&lt;/param-name&gt;
     &lt;param-value>org.eclipse.birt.spring.example.BirtWebConfiguration&lt;/param-value&gt;
   &lt;/init-param&gt;
   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
 &lt;/servlet&gt;

 &lt;servlet-mapping&gt;
   &lt;servlet-name&gt;springandbirt&lt;/servlet-name&gt;
   &lt;url-pattern&gt;/reports&lt;/url-pattern&gt;
 &lt;/servlet-mapping&gt;

  &lt;welcome-file-list&gt;
    &lt;welcome-file&gt;
      index.jsp
    &lt;/welcome-file&gt;
  &lt;/welcome-file-list&gt;
&lt;/web-app&gt;

</pre><p>
All /reports URLs are routed to the Spring DispatcherServlet.  The index.jsp has two links to run two report examples.  One report uses the BIRT Sample Derby database and the other accesses the Car Service bean, as shown in the following code:</p>
<pre>
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1>BIRT Report&lt;/h1&gt;
&lt;p&gt;
&lt;a href="http://localhost:8080/springandbirt/reports?ReportName=TopNPercent.rptdesign"&gt;click here to run BIRT Report&lt;/a&gt;&lt;br&gt;
&lt;a href="http://localhost:8080/springandbirt/reports?ReportName=SampleSpring.rptdesign"&gt;click here to run BIRT Report that calls a Spring Bean&lt;/a&gt;
&lt;/p&gt;
&lt;%= new java.util.Date() %&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre><p>
<IMG SRC="http://www.springsource.org/files/BIRT3.7SpringIntegrationVersion7_html_53710ab3.png" ALIGN=BOTTOM WIDTH=576 HEIGHT=359 BORDER=0><br />
Figure 1 – Viewing BIRT Spring MVC example output</p>
<h2><a name ="birtviewer">Accessing Spring Beans from the BIRT Viewer</a></h2>
<p>In many cases, BIRT users wish to add the Spring IOC Container to the BIRT Viewer.  The Viewer is an AJAX-based Java web application and is used to run and render reports. The Viewer supports pagination, table of contents, and exporting to other formats like PDF.  When deployed in this fashion, developers need access to the beans located in the Spring container for reporting purposes.  This scenario is very simple to implement.  </p>
<p>Download and extract the BIRT Runtime from the BIRT website.  The BIRT Viewer is located in the WebViewerExample directory of the runtime download.  To deploy the Viewer to Tomcat, a user can just copy the WebViewerExample directory to the tomcatinstall/webapps directory.  Most users rename this folder to something more pertinent like BirtViewer.  The BIRT website supplies more details on deploying the viewer to other application servers.  Once the viewer is installed, a Spring ContextLoaderListener can be added to the web.xml of the Viewer.  To do this, add the following listener entry below the context parameters to the web.xml:</p>
<pre>
&lt;listener&gt;
	&lt;listener-class>org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;
</pre><p>
You can also specify a context parameter to point to the Spring Context class, as shown in the following code:  </p>
<pre>
   &lt;context-param&gt;
     &lt;param-name&gt;contextClass&lt;/param-name&gt;
     &lt;param-value&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;/param-value&gt;
   &lt;/context-param&gt;   
   &lt;context-param&gt;
     &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
     &lt;param-value&gt;org.eclipse.birt.spring.webviewer.example.BirtDataServiceConfiguration&lt;/param-value&gt;
   &lt;/context-param&gt;
</pre><p>
In this scenario we do not need the BirtWebConfiguration class so we are pointing the contextConfigLocation to point to the BirtDataServiceConfiguration class instead.</p>
<p>The same POJO classes described in the first section of this article are used here (just a different package name) and need to be in the WEB-INF/classes directory or the package needs to be in a JAR file and placed in the WEB-INF/lib directory of the Viewer.  Finally, add the following JAR files from the Spring Framework download to the WebViewer’s WEB-INF/lib directory:</p>
<ul>
<li>cglib-nodep-2.2.2.jar</li>
<li>org.springframework.aop-3.1.0.RELEASE.jar</li>
<li>org.springframework.asm-3.1.0.RELEASE.jar</li>
<li>org.springframework.beans-3.1.0.RELEASE.jar</li>
<li>org.springframework.context.support-3.1.0.RELEASE.jar</li>
<li>org.springframework.context-3.1.0.RELEASE.jar</li>
<li>org.springframework.core-3.1.0.RELEASE.jar</li>
<li>org.springframework.expression-3.1.0.RELEASE.jar</li>
<li>org.springframework.web.servlet-3.1.0.RELEASE.jar</li>
<li>org.springframework.web-3.1.0.RELEASE.jar</li>
</ul>
<p>To access the carService bean within a BIRT expression or from a BIRT JavaScript event handler, use the following syntax:</p>
<pre> 
//BIRT label report item onCreate Script
importPackage(Packages.org.springframework.context);
importPackage(Packages.org.springframework.web.context.support );
var sc = reportContext.getHttpServletRequest().getSession().getServletContext();
//ApplicationContext 
spring = WebApplicationContextUtils.getWebApplicationContext(sc);
var mypojo = spring.getBean("carService");
this.Text = mypojo.getAllCars().get(0).getMake();
</pre><p>
<IMG SRC="http://www.springsource.org/files/BIRT3.7SpringIntegrationVersion7_html_d1a7e98.png" ALIGN=BOTTOM WIDTH=576 HEIGHT=472 BORDER=0><br />
Figure 2- Building a BIRT Expression</p>
<p>The BIRT expression or script fails when previewing the report in the designer. To prevent the failure, wrap the expression or script in an “if” statement, as shown in the following code:</p>
<pre> 
if( !reportContext.getHttpServletRequest().getAttribute("attributeBean").isDesigner()){
//Access Bean 
} 
</pre><p><IMG SRC="http://www.springsource.org/files/BIRT3.7SpringIntegrationVersion7_html_4f65ce7d.png" ALIGN=BOTTOM WIDTH=576 HEIGHT=420 BORDER=0><br />
Figure 3 – Displaying Spring bean output in BIRT Viewer</p>
<h2><a name ="remotebeansfrombirt">Using Remoting to Access Beans from a BIRT Report</a></h2>
<p>The previous two sections of this article focused on integrating the BIRT engine and Viewer with the Spring framework. While these approaches work well, suppose you need to access a Spring bean that is located in a separate context or on another machine. Spring Remoting can be used to implement this functionality. </p>
<p>While any of the Spring Remoting technologies or other mechanisms like SOAP or REST would work, this section describes using Spring’s HTTP Invoker-based service exporter. To implement this example, we first build an example web application containing a Car Service bean that supplies Car POJOs to a remoting client. </p>
<p>For remoting, we first define the Car POJO, as shown in the following code:</p>
<pre> 
package org.eclipse.birt.spring.remoting.example;

public class Car implements ICar{

	private static final long serialVersionUID = 1L;
	private String make;
	private String model;
	private String year;
	public String getMake() {
		return make;
	}
	public void setMake(String make) {
		this.make = make;
	}
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public String getYear() {
		return year;
	}
	public void setYear(String year) {
		this.year = year;
	}
	public Car() {
		this.year = "2000";
		this.make = "Chevrolet";
		this.model = "Corvette";
	}
	public String toString(){
		return "Make:--"+this.make+" Model:--"+this.model+" Year:--"+this.year;
	}
}
</pre><p>
Next we implement the Car Service.</p>
<pre> 
package org.eclipse.birt.spring.remoting.example;
import java.util.Arrays;
import java.util.List;

import org.eclipse.birt.spring.remoting.example.Car;
import org.eclipse.birt.spring.remoting.example.CarService;
public class CarServiceImpl implements CarService{

public List<Car> getAllCars(){
	Car car1 = new Car();
	car1.setYear("2000");
	car1.setMake("Chevrolet");
	car1.setModel("Corvette");
	Car car2 = new Car();
	car2.setYear("2005");
	car2.setMake("Dodge");
	car2.setModel("Viper");
	Car car3 = new Car();
	car3.setYear("2002");
	car3.setMake("Ford");
	car3.setModel("Mustang GT");
	List<Car> cars = Arrays.asList(  car1, car2, car3 ) ;
	return cars ; 

	
}
}

</pre><p>
Finally we implement the BirtDataServiceConfiguration file to handle Java configuration of the Spring context.</p>
<pre> 
package org.eclipse.birt.spring.remoting.example;

import java.util.HashMap;
import java.util.Map;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;
import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;


@Configuration
public class BirtDataServiceConfiguration {

	@Bean 
	public CarService carService(){ 
		 
		return  new CarServiceImpl();
	}

	@Bean 
	public HttpInvokerServiceExporter myServiceExporter(){ 
		HttpInvokerServiceExporter hse = new HttpInvokerServiceExporter();
		hse.setService( this.carService()) ;
		hse.setServiceInterface( CarService.class); 
		return hse; 
	}

	@Bean
	public SimpleUrlHandlerMapping myUrlMapping(){

		SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();         
		Map<String, Object> urlMap = new HashMap<String, Object>();         
		urlMap.put("/carService", myServiceExporter());                  
		mapping.setUrlMap(urlMap);         
		mapping.setAlwaysUseFullPath(true);         
		return mapping; 		
	}


}
</pre><p>
This class just maps /carService URLs to an HttpInvokerServiceExporter object that exposes the carService bean to remoting clients.</p>
<p>Next, we can create a web.xml for this application that uses the Spring DispatcherServlet, as shown in the following code:</p>
<pre>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd"&gt;
&lt;web-app&gt;

 &lt;servletgt;
   &lt;servlet-name&gt;springandbirt&lt;/servlet-name&gt;
   &lt;servlet-class&gt;
     org.springframework.web.servlet.DispatcherServlet
   &lt;/servlet-class&gt;
   &lt;init-param&gt;
     &lt;param-namegt;contextClass&lt;/param-name&gt;
     &lt;param-valuegt;org.springframework.web.context.support.AnnotationConfigWebApplicationContextlt;/param-value&gt;
   &lt;/init-param&gt;   
   &lt;init-param&gt;
     &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
     &lt;param-value&gt;org.eclipse.birt.spring.remoting.example.BirtDataServiceConfiguration&lt;/param-value&gt;
   &lt;/init-param&gt;
   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
 &lt;/servlet&gt;

 &lt;servlet-mapping&gt;
   &lt;servlet-name>springandbirt&lt;/servlet-name&gt;
   &lt;url-pattern&gt;/carService&lt;/url-pattern&gt;
 &lt;/servlet-mapping&gt;

  &lt;welcome-file-list&gt;
    &lt;welcome-file&gt;
      index.jsp
    &lt;/welcome-file&gt;
  &lt;/welcome-file-list&gt;

&lt;/web-app&gt;
</pre><p>
The web application needs the following JAR files from the Spring Framework in the WEB-INF/lib directory:</p>
<ul>
<li>cglib-nodep-2.2.2.jar</li>
<li>org.springframework.aop-3.1.0.RELEASE.jar</li>
<li>org.springframework.asm-3.1.0.RELEASE.jar</li>
<li>org.springframework.beans-3.1.0.RELEASE.jar</li>
<li>org.springframework.context.support-3.1.0.RELEASE.jar</li>
<li>org.springframework.context-3.1.0.RELEASE.jar</li>
<li>org.springframework.core-3.1.0.RELEASE.jar</li>
<li>org.springframework.expression-3.1.0.RELEASE.jar</li>
<li>org.springframework.web.servlet-3.1.0.RELEASE.jar</li>
<li>org.springframework.web-3.1.0.RELEASE.jar
<li>aopalliance.jar (Spring Dependency)</li>
</ul>
<p>The application can now be built and deployed.</p>
<p>Next, we need to build a remoting client to access the previously built application.  In this example, it is simply a JAR file that we can include with the BIRT Viewer for a separate context access to the carService. </p>
<p>The client jar should contain the CarService Interface and the CarPojo/ICarPojo Class/Interface. In addition to these three Classes we need a configuration class to handle Java configuration of the Spring Context</p>
<p>This class uses an AnnotationConfigApplicationContext class to specify a Java class to handle configuration of the Spring Context.  The class ContextConfig is presented below and uses an HttpInvokerProxyFactoryBean to connect to the server and retrieve the car service bean.  </p>
<pre> 
package org.eclipse.birt.spring.remoting.client.example;

import org.eclipse.birt.spring.remoting.example.CarService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean;

@Configuration
public class ContextConfig {

	@Bean
	public HttpInvokerProxyFactoryBean client() {     
		HttpInvokerProxyFactoryBean proxy = new HttpInvokerProxyFactoryBean();     
		proxy.setServiceInterface(CarService.class);     
		proxy.setServiceUrl("http://localhost:8080/springandbirtremote/carService");
		return proxy;
	} 

}
</pre><p>
This configuration file defines one bean that acts as the HTTP invoker proxy. The service URL defines the location of the remoting server that we defined earlier and the service interface defines the object returned. To build the client JAR file, add the same JAR files that were added for the server to the classpath.</p>
<p>To call the car service from the BIRT viewer, use the following JavaScript snippet in the BIRT Expression Builder or from a JavaScript event handler, as shown in the following code:</p>
<pre> 
importPackage(Packages.org.springframework.context);
importPackage(Packages.org.springframework.web.context.support );
var sc = reportContext.getHttpServletRequest().getSession().getServletContext();
//ApplicationContext 
var spring = WebApplicationContextUtils.getWebApplicationContext(sc);
var mypojo = spring.getBean("client");
mypojo.getAllCars().get(0).getMake();
</pre><p>
Add all the jars described in the section on building the remoting server to the WEB-INF/lib of the BIRT Viewer. In addition, add the remoting client jar to the WEB-INF/lib of the BIRT Viewer. Finally add the following to the web.xml of the deployed viewer.  These settings were discussed in the Accessing Spring Beans from the BIRT Viewer section of this article.  Note that the contextConfigLocation is changed to the ContextConfig class.</p>
<pre>
&lt;listener&gt;
	&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;

   &lt;context-param&gt;
     &lt;param-name&gt;contextClass&lt;/param-name&gt;
     &lt;param-value&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;/param-value&gt;
   &lt;/context-param&gt;   
   &lt;context-param&gt;
     &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
     &lt;param-value&gt;org.eclipse.birt.spring.webviewer.example.ContextConfig&lt;/param-value&gt;
   &lt;/context-param&gt;

</pre><p>
This approach allows an existing deployed BIRT Viewer to access a separate machine/context to access remote beans.  As a final note, if you are using an intermediate Java class to access the remote Bean use the following code.</p>
<pre> 
.
.
private final CarService carPojoService;

	public CarPojoClient(){
		final ApplicationContext context = new AnnotationConfigApplicationContext( ContextConfig.class);      
		this.carPojoService = (CarService) context.getBean("client");   
.
.

</pre><h2><a name = "conclusion">Conclusion</a></h2>
<p>The Spring and BIRT frameworks are very popular in the Java community. Many users of the BIRT technology are also using Spring functionality as part of their enterprise application code to handle such functions as sourcing data, report presentation and access control. These are just some of the benefits of using the Spring Framework in conjunction with BIRT. This article provides an introduction to integrating BIRT and Spring. While other scenarios do exist, this article can serve as a learning tool to get you started using the two technologies concurrently. </p>
<h2><a name="attachments">Attachments</a></h2>
<p>Developers that wish to take advantage of the integration classes described in this article can use the <CODE>SpringandBirtCoreJar.zip</CODE> download below. For the examples, see the <CODE>SpringBirtArticleSamples.zip</CODE> download.</p>
<p><a href="http://www.springsource.org/files/birt/SpringandBirtCoreJar.zip">SpringandBirtCoreJar.zip</a><br />
<a href="http://www.springsource.org/files/birt/SpringBirtArticleSamples.zip">SpringBirtArticleSamples.zip</a></p>
  </div>

  
</div></div> <!-- /node-inner, /node -->


            </div>
    </div>
        </td>

        <td width="50px">&nbsp;</td>
        <td width="310px" valign="top" align="left">

              <!--[If IE 7]><br><![endif]-->
      <div style="margin-top:-40px;">
      <div align="right">

	  <p style="line-height:26px;">&nbsp;</p>
	  <p>

      </p>
      </div>

	              
      
       
        
        
        
        </div>
        </td>

        </tr>
        </table>


        
      </div></div><!-- /.section, /#content -->


      
      
    </div></div><!-- /#main, /#main-wrapper -->

<div style="background-color:#252525;margin-top:-14px;">
         <div id="footer"><div class="section">


        <div class="region region-footer">
  <div id="block-block-23" class="block block-block first region-odd odd region-count-1 count-1"><div class="block-inner">

  
  <div class="content">
    <style type="text/css">
#communities{position:relative;}
#communities li{margin:0;padding:0;list-style:none;position:absolute;top:0;}
#communities li, #communities a{height:69px;display:block;}

#cf{left:0px;width:260px;}
#cf{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat 0 0;}
#cf a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat 0 0;}

#grails{left:275px;width:120px;}
#grails{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -275px 0;}
#grails a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -275px 0;}

#groovy{left:400px;width:100px;}
#groovy{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -400px 0;}
#groovy a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -400px 0;}

#hyperic{left:500px;width:170px;}
#hyperic{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -500px 0;}
#hyperic a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -500px 0;}

#rabbit{left:670px;width:140px;}
#rabbit{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -670px 0;}
#rabbit a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -670px 0;}

#wm{left:810px;width:170px;}
#wm{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -810px 0;}
#wm a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -810px 0;}

#communities_bg {background-color:#181818;height:69px;padding:1px 10px 15px 10px;border-radius:5px;margin:10px 0 27px 0}

#communities_title {color: #CCC;font-size: 18px;font-weight: 300;padding-bottom: 15px;line-height: 24px;text-shadow: 0 1px 0 black;margin-left:10px}

</style>

<p>&nbsp;</p>
<table style="margin: 0 10px 0 10px;">

<tr valign="top">
    <span id="communities_title">Other Communities</span>
</tr>
<tr valign="top">
    <div id="communities_bg">
        <ul id="communities">
            <li id="cf" style="margin-left: 30px;"><a href="http://www.cloudfoundry.org" target="_blank"></a></li>
            <li id="grails" style="margin-left: 65px;"><a href="http://www.grails.org" target="_blank"></a></li>
            <li id="groovy" style="margin-left: 110px;"><a href="http://groovy.codehaus.org/" target="_blank"></a></li>
            <!--<li id="hyperic"><a href="http://www.hyperic.com/community" target="_blank"></a></li>-->
            <li id="rabbit" style="margin-left: -20px;"><a href="http://www.rabbitmq.com" target="_blank"></a></li>
            <li id="wm"><a href="http://redis.io" target="_blank"></a></li>
        </ul>
    </div>
</tr>

<tr valign="top">
<th class="footerth" style="padding-left:-10px;"><a href="http://www.springsource.org">SpringSource</a></th>

<th class="footerth"><a href="/features">Features</a></th>

<th class="footerth"><a href="/get-started">Get Started</a></th>

<th class="footerth"><a href="/get-involved">Get Involved</a></th>

<th class="footerth"><a href="/projects">Projects</a></th>


</tr>
<tr>
<td valign="top" width="195px">

<span class="footerlist">
<a href="/about">About Us</a><br>
<a href="http://blog.springsource.org">Our Blog</a><br>
<a href="/case-studies">Case Studies</a><br>
<a href="/news-events">Latest News & Events</a><br>
<a href="http://www.vmware.com/jobs/" target="_blank">SpringSource Jobs</a>&nbsp;&nbsp;<a href="http://www.vmware.com/jobs/" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/ICO_PopUp-NewWindow.png"></a><br>
<a href="/consulting">Consulting</a><br>
<!--<a href="http://www.springsource.com/contact" target="_blank">Contact Us</a><br>-->
<a href="/newsletter-subscription">Subscribe to Newsletter</a><br>

</span>

<p style="margin-top:15px;"><a href="/newsletter-subscription">
<img src="http://www.springsource.org/sites/all/themes/s2org11/images/button_home_subscribe.png"></a></p>
</td>


<td valign="top" width="140px">

<span class="footerlist">

<a href="/features/modern-web">Modern Web</a><br>
<a href="/features/data-access">Data Access</a><br>
<a href="/features/integration">Integration</a><br>
<a href="/features/mobile">Mobile</a><br>
<a href="/features/social">Social</a><br>
<a href="/features/security">Security</a><br>
<a href="/features/cloud-ready">Cloud Ready</a><br>
</span>
</td>


<td valign="top" width="160px">

<span class="footerlist">
<a href="/sts">Get Tool Kit (STS)</a> <br>
<a href="/tutorials">Tutorials</a> <br>
<a href="/samples">Code Samples</a> <br>
<a href="/documentation">Documentation</a> <br>
<a href="http://forum.springsource.org">Forums</a> <br>
<a href="http://www.springsource.com/training" target="_blank">Training</a><br>


</span>
</td>


<td valign="top" width="156px">

<span class="footerlist">


<a href="http://forum.springsource.org">Discussions</a><br>
<a href="https://jira.springsource.org" target="_blank">Issue Tracker</a><br>
<a href="https://github.com/SpringSource" target="_blank">Source Repository</a>&nbsp;&nbsp;<a href="https://github.com/SpringSource" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/ICO_PopUp-NewWindow.png"></a><br> 

</span>
</td>

<td valign="top" width="140px">

<span class="footerlist">

<a href="/spring-amqp">Spring AMQP</a><br>
<a href="/spring-android">Spring for Android</a><br>
<a href="/spring-batch">Spring Batch</a><br>
<a href="/spring-data">Spring Data</a><br>
<a href="/spring-framework">Spring Framework</a><br>
<a href="/spring-gemfire">Spring Gemfire</a><br>
<a href="/spring-integration">Spring Integration</a><br>


</span>
</td>

<td valign="top" width="140px">

<span class="footerlist">

<a href="/spring-mobile">Spring Mobile</a><br>
<a href="http://www.springframework.net" target="_blank">Spring .NET</a>&nbsp;&nbsp;<a href="http://www.springframework.net" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/ICO_PopUp-NewWindow.png"></a><br>
<a href="/spring-roo">Spring Roo</a><br>
<a href="/spring-security">Spring Security</a><br>
<a href="/spring-social">Spring Social</a><br>
<a href="/spring-web-flow">Spring Web Flow</a><br>
<a href="/spring-web-services">Spring Web Services</a><br>

</span>
</td>



</tr>
</table>


<div style="background-color:#1e1e1e;width:952;-moz-border-radius: 5px;
    -webkit-border-bottom-left-radius: 5px;
    -webkit-border-bottom-right-radius: 5px;
    border-radius: 5px;">
<center>
<p class="copyright">
<a style="color:#eee;" href="/user">&#169;</a>&nbsp;
<script type="text/javascript">

var d = new Date();
document.write(d.getFullYear());

</script>
SpringSource.
All Rights Reserved.
<a href="http://www.vmware.com/help/legal.html" target="_blank">Terms of Use</a>, 
<a href="http://www.vmware.com/help/privacy.html" target="_blank">Privacy</a> and 
<a href="/trademark_standards">Trademark Standards</a>
</p>
</center>
</div>

<p>&nbsp;</p>
<p>&nbsp;</p>  </div>

  
</div></div> <!-- /block-inner, /block -->
<div id="block-block-7" class="block block-block last region-even even region-count-2 count-2"><div class="block-inner">

  
  <div class="content">
    <!-- Eloqua Img Code Code -->
<script type="text/javascript" src="/sites/all/themes/s2org11/js/elqNow/elqImg.js"></script>
<!-- Begin Google Code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2728886-3");
pageTracker._setDomainName("springsource.org");
pageTracker._setAllowHash(false);
pageTracker._setAllowLinker(true);
pageTracker._trackPageview();
var OrgTracker = _gat._getTracker("UA-2728886-2");
OrgTracker._setDomainName("springsource.org");
OrgTracker._setAllowHash(false);
OrgTracker._setAllowLinker(true);
OrgTracker._trackPageview();
</script>
<!-- End Google Code -->  </div>

  
</div></div> <!-- /block-inner, /block -->
</div><!-- /.region -->

      </div></div>   <!-- /.section, /#footer -->
    <!--  -->
</div>
  </div></div><!-- /#page, /#page-wrapper -->

  
  <script type="text/javascript" src="/sites/all/modules/custom/google_cse/google_cse.js?R"></script>
<script type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "googleCSE": { "language": "en" } });
//--><!]]>
</script>

</body>
</html>

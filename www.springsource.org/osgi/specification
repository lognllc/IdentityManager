<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Spring OSGi Specification (v0.7 - deprecated) | SpringSource.org</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="shortcut icon" href="/sites/all/themes/s2org11/favicon.ico" type="image/x-icon" />
  <link type="text/css" rel="stylesheet" media="all" href="/modules/aggregator/aggregator.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/node/node.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/system/defaults.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/system/system.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/system/system-menus.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/user/user.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/cck/theme/content-module.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/ctools/css/ctools.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/custom/google_cse/google_cse.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/date/date.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/filefield/filefield.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/nice_menus/nice_menus.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/zen/framework/nice_menus.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/prettify/styles/drupalorg.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/cck/modules/fieldgroup/fieldgroup.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/modules/views/css/views.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/modules/comment/comment.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/html-reset.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/wireframes.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/layout-fixed.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/page-backgrounds.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/tabs.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/messages.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/pages.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/block-editing.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/blocks.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/navigation.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/panels-styles.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/views-styles.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/nodes.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/comments.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/forms.css?R" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/fields.css?R" />
<link type="text/css" rel="stylesheet" media="print" href="/sites/all/themes/s2org11/css/print.css?R" />
<!--[if IE]>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/ie.css?R" />
<![endif]-->
<!--[if lte IE 6]>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/s2org11/css/ie6.css?R" />
<![endif]-->
  <script type="text/javascript" src="/misc/jquery.js?R"></script>
<script type="text/javascript" src="/misc/drupal.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/superfish/js/superfish.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/superfish/js/jquery.bgiframe.min.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/superfish/js/jquery.hoverIntent.minified.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/nice_menus/nice_menus.js?R"></script>
<script type="text/javascript" src="/sites/all/libraries/prettify/src/prettify.js?R"></script>
<script type="text/javascript" src="/sites/all/modules/prettify/prettify.loader.js?R"></script>
<script type="text/javascript" src="/sites/all/themes/s2org11/js/navigation.js?R"></script>
<script type="text/javascript" src="/sites/all/themes/s2org11/js/popup.js?R"></script>
<script type="text/javascript" src="/sites/all/themes/s2org11/js/elqNow/elqCfg.js?R"></script>
<script type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "basePath": "/", "nice_menus_options": { "delay": 800, "speed": 1 }, "prettify": { "linenums": false, "match": ".content", "nocode": "no-code", "custom": [  ], "markup": { "code": true, "pre": true, "precode": false } } });
//--><!]]>
</script>
</head>
<body class="page not-front not-logged-in node-type-page no-sidebars page-osgi-specification section-osgi page-panels">

	  


<!--begin custom navigation-->
      	  
<!--[if (IE 6)|(IE 7)|(IE 8)]>
<div style="height:97px;margin-top:0px;background: #457228;">
<![endif]-->

<div style="height:97px;margin-top:0px; background: url('http://www.springsource.org/sites/all/themes/s2org11/images/BG_SiteHeader_Glow.png') no-repeat scroll center top, url('/files/homepage/BG_SiteBillboardAndHeader_50.png') repeat-x scroll 0 0 #367B09;">

    <div id="top">
  		<div style = "height:80px;margin-top:0px;background: url('/files/homepage/BG_SiteTopNav_new.png') repeat-x scroll 0 0 #F1F1F1;
  	-moz-border-radius: 0 0 5px 5px;
    -webkit-border-bottom-left-radius: 5px;
    -webkit-border-bottom-right-radius: 5px;
    border-radius: 0 0 5px 5px;
-moz-box-shadow: 0 0 15px #333;
-webkit-box-shadow: 0 0 15px#333;
box-shadow: 0 0 15px #333;">
<div style="margin-left:10px;margin-right:10px;">
 	          <table valign="top" height="80" style="font-size:14px;text-transform:uppercase;color:#666;margin:0;">
	          <tr>
	          
	          <td>
	           <a href="/"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/logo_springsource_community.png"></a>
	           </td>
	           <td width="5">&nbsp;</td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                  <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/features" onmouseover="mouseOver1()" onmouseout="mouseOut1()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_features.png" id="b1"></a><br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                 <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/get-started" onmouseover="mouseOver2()" onmouseout="mouseOut2()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_getstarted.png" id="b2"></a><br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                 <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/get-involved" onmouseover="mouseOver3()" onmouseout="mouseOut3()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_getinvolved.png" id="b3"></a></br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>
	           <td align="center">
                 <!--[If IE 7]><div style="margin-top:-3px;"><![endif]-->
	           	           <a href="/news-events" onmouseover="mouseOver4()" onmouseout="mouseOut4()">
	           <img src="http://www.springsource.org/sites/all/themes/s2org11/images/nav_newsevents.png" id="b4"></a><br>
	                             <!--[If IE 7]></div><![endif]-->
	           </td>
	           <td width="7" align="center">
	           <img src="/files/homepage/nav_sep_line_new.png">
	           </td>

	           <td align="center">

	      	  
        <div id="search-box" style="border-bottom: 1px solid #E2E2E2;">
          <form action="/search/google" method="get" id="search-theme-form">
            <div><div id="search" class="container-inline">

              <input type="text" maxlength="128" size="16" name="query" value="Search" style="border: 1px solid #CCCCCC;margin-bottom:10px;margin-left: 2px;color:#999999" class="form-text" onblur="this.value = this.value || 'Search'; this.style.color = '#999999';" onfocus="if(this.value=='Search') {this.value='';} this.style.color = '#999999';" />
                          
              <input type="hidden" name="output" value="xml_no_dtd" />
              <input type="hidden" name="client" value="google-csbe" />
              <input type="hidden" name="cx" value="009687201310241541466:zerjfa_shxo" />
              <input type="hidden" name="ie" value="utf-8" />
              <input type="hidden" name="oe" value="utf-8" />
              <input type="hidden" name="op" value="Search" />
            </div></div>
          </form>
        </div>
               <div id="subscribe" style="color: #7E7E7E;float: left;padding-top: 5px;padding-left: 10px;border-top: 1px solid whiteSmoke;">
              <a href="/newsletter-subscription" style="color: #7e7e7e;background:url(/files/header/nav_subscription_off.gif) 3px 2px no-repeat" onmouseover="this.style.background = 'url(/files/header/nav_subscription_on.gif) 3px 2px no-repeat';this.style.textDecoration = 'none'" onmouseout="this.style.background = 'url(/files/header/nav_subscription_off.gif) 3px 2px no-repeat';this.style.textDecoration = 'none'">
                  <span style="padding-left:23px">Subscribe</a>
              </a>
        </div>
        

		      </td>
		      
		      </tr>
	      </table>
</div>
  		
              </div></div></div>

<!--[if (IE 6)|(IE 7)|(IE 8)]>
 </div>
<![endif]-->
<!--end custom navigation-->



  <div id="page-wrapper"><div id="page">

  
    <div id="header"><div class="section clearfix">

      
<div id="name-and-slogan">

</div>

      
      


    </div></div><!-- /.section, /#header -->

    <div id="main-wrapper"><div id="main" class="clearfix">

      <div id="content" style="margin-left:10px;margin-right:10px;" class="column"><div class="section">


        
        
        <!-- <div class="breadcrumb"><a href="/">Home</a> › </div> -->

	  
	  
	  
                        

       <table width="100%" >
       <tr>
     <td width="100%" valign="top" align="left">
       <div style="width:100%">
       
 <div id="content-area">

	<div style="margin-top:-20px;">
	<!--[If IE 7]><br><![endif]-->

<table>
<tr>
<td width="95%">
	  <h1 class="title" id="page-title">Spring OSGi Specification (v0.7 - deprecated)</h1>
</td>
<td align="right">
      <a class="a2a_dd" href="http://www.addtoany.com/share_save" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/button_share.png"></a>
<script type="text/javascript">
var a2a_config = a2a_config || {};
a2a_config.color_main = "e5e6e6";
a2a_config.color_border = "5c6c75";
a2a_config.color_link_text = "333333";
a2a_config.color_link_text_hover = "333333";
var a2a_config = a2a_config || {};
a2a_config.onclick = 1;
</script>
<script type="text/javascript" src="http://www.wavemaker.com/_js/addtoany.js"></script>
</td>
</tr>
</table>
	  <p>
	  	  </p>

           <div id="node-350" class="node node-type-page node-promoted build-mode-full"><div class="node-inner">

  
  
  
  
  <div class="content">
    <h2>This material has been deprecated and replaced by the Spring DM reference <a href="http://static.springframework.org/osgi/docs/current/reference/html/">documentation</a></h2>
<h2>Additionally, a formalized model for Spring and Spring DM can be found in the upcoming OSGi 4.2 Blueprint Services specification (<a href="http://www.osgi.org/Specifications/Drafts">draft</a>)</h2>

	<h2>1.0 Introduction</h2>


	<p>The Spring Framework is the leading full-stack Java/JEE application framework. It provides a lightweight container and a non-invasive programming model enabled by the use of dependency injection, aop, and portable service abstractions. OSGi offers a dynamic application execution environment in which components (bundles) can be installed, updated, or removed on the fly. It also has excellent support for modularity and versioning.</p>


	<p>The goal of Spring&#8217;s OSGi support is to make it as easy as possible to write Spring applications that can be deployed in an OSGi execution environment, and that can take advantage of the services offered by the OSGi framework. Spring&#8217;s OSGi support also makes development of OSGi applications simpler and more productive by building on the ease-of-use and power of the Spring Framework. For enterprise applications, we envisage this will offer the following benefits:</p>


	<ul>
	<li>Better separation of application logic into modules</li>
		<li>The ability to deploy multiple versions of a module concurrently</li>

		<li>The ability to dynamically discover and use services provided by other modules in the system</li>
		<li>The ability to dynamically deploy, update and undeploy modules in a running system</li>
		<li>Use of the Spring Framework to instantiate, configure, assemble, and decorate components within and across modules.</li>
		<li>A simple and familiar programming model for enterprise developers to exploit the features of the OSGi platform.</li>
	</ul>


	<p>We believe that the combination of OSGi and Spring offers the most comprehensive model available for building enterprise applications.</p>


	<p>It is not a goal of Spring&#8217;s OSGi support to provide a universal model for the development of any OSGi-based application, though some OSGi developers may of course find the Spring model attractive and choose to adopt it. Existing OSGi bundles and any services they may export are easily integrated into applications<br />using the Spring OSGi support, as are existing Spring configurations.</p>


	<p>The Spring OSGi supported is targeted at OSGi R4 and above, and <span class="caps">JDK</span> level 1.3 and above.</p>


	<p>This specification assumes some knowledge of both Spring and OSGi. See the introductory whitepapers &#8220;OSGi for Spring developers&#8221; and &#8220;Spring for OSGi developers&#8221; for background.  <em>Note: these whitepapers do not yet exist at time of writing!</em></p>


	<h2>2.0 Bundles and Application Contexts</h2>


	<p>The unit of deployment (and modularity) in OSGi is the <em>bundle</em>. A bundle known to the OSGi runtime is in one of three steady states: installed, resolved, or active. Bundles may export <em>services</em> that are made available for other bundles to discover and to use.</p>


	<p>In Spring the primary unit of modularity is an <em>application context</em>, which contains some number of <em>beans</em> (objects managed by the Spring application context). Application contexts can be configured in a hierarchy such that a child application context can see beans defined in a parent, but not vice-versa. The Spring concepts of <em>exporters</em> and <em>factory beans</em> are used to export references to beans to clients outside of the application context, and to inject references to services that are defined outside of the application context.</p>


	<p>There is a natural affinity between an OSGi bundle and a Spring application context: an <em>active</em> bundle may contain a Spring application context, responsible for the instantiation, configuration, assembly, and decoration of the objects (beans) within the bundle. Some of these beans may optionally be exported as OSGi services and thus made available to other bundles, beans within the bundle may also be transparently injected with references to OSGi services.</p>


	<h3>2.1 Creating an Application Context within a Bundle</h3>


	<p>An application context is configured using one or more <span class="caps">XML</span> configuration files defining beans. (Strictly, an application context is agnostic to configuration format, but <span class="caps">XML</span> is the most frequently used). The <span class="caps">XML</span> documents containing the configuration information are placed in the <span class="caps">META</span>-INF/spring folder in the bundle. By default, Spring will consider every document in the folder with the &#8221;.xml&#8221; extension as defining part of the configuration for the application context.</p>


	<p>This default behaviour can be overridden using the optional Spring-Context manifest header. The value of the header is a comma-separated list of resource paths and directives</p>


<blockquote>
	<p>Spring-Context ::= context ( &#8217;,&#8217; context ) &#42; <br />> context        ::= path ( &#8217;;&#8217; path ) &#42; (&#8217;;&#8217;directive) &#42;</p>

</blockquote>




	<p>Each path is treated as a path to a resource defined in the bundle, for example:</p>


<blockquote>
	<p>Spring-Context: config/application-context.xml,config/security.xml</p>

</blockquote>




	<p>Spring will automatically create an application context whenever a bundle with a Spring-Context manifest entry or resources in the <span class="caps">META</span>-INF/spring folder is activated. To enable this support you must first install and start the supplied  org.springframework.osgi.extender bundle in your OSGi runtime.</p>


	<p>When an application context is first created it examines the OSGi service references within the configuration to see if there are any service references that specify a non-optional cardinality (i.e. that specify either 1..1 or 1..n). Initialization of the context will not complete until all of these required services are available. The wait-for-dependencies directive can be set to false in the Spring-Context header to change this behaviour. When wait-for-dependencies is set to false, creation of an application context will fail if all the required services are not available at the time of activation.</p>


	<p>The manifest header entry:</p>


<blockquote>
	<p>Spring-Context: &#42;;wait-for-dependencies:=false</p>

</blockquote>




	<p>indicates that all xml files in <span class="caps">META</span>-INF/spring should be used for configuration, and that the context creation is to fail if required services are not immediately available.</p>


	<p>A header entry:</p>


<blockquote>
	<p>Spring-Context: config/application-context.xml;wait-for-dependencies:=false</p>

</blockquote>




	<p>indicates that the config/application-context.xml should be used to configure the application context, and the context creation is to fail if required services are not immediately available.</p>


	<p>The application context is automatically published as an OSGi service as an instance of org.springframework.context.ApplicationContext. In addition a service property org.springframework.context.service.name is set to the bundle symbolic name of the bundle hosting the application context. Publishing of the context as a service can be disabled by specifying the &#8220;publish-context:=false&#8221; directive in the Spring-Context manifest entry.</p>


	<p><em>Note: The application context is published as a service to facilitate testing and administration. Use of the &lt;osgi:reference&gt; and &lt;osgi:service&gt; elements is the preferred way to obtain a reference to a bean defined in another application context (as opposed to invoking getBean() on the application context service).  The reason is that by composing services using &lt;osgi:reference&gt; and &lt;osgi:service&gt;, the OSGi infrastructure will ensure that a bean only sees services with compatible versions of types, whereas if an application context is looked up in the registry, and then an object returned via getBean(...), then the only guarantee of type compatibility is that the ApplicationContext type itself is compatible. Clearly this guarantee would not be strong enough in a system with multiple concurrent versions of bundles deployed.</em></p>


	<h3>2.2 Spring&#8217;s resource abstraction</h3>


	<p>Spring loads resources within an application context using a Spring ResourceLoader. Relative resource paths are interpreted by the application context in a manner appropriate to the application context type (for example, class path based context, or a web-app based context). For OSGi application contexts, a relative resource path is interpreted as a resource to be loaded from the bundle classpath. If a resource path starts with the &#8220;bundle:&#8221; prefix then only the bundle itself and its attached fragments are searched for the given resource.</p>


	<h3>2.3 BundleContextAware</h3>


	<p>Spring encourages the development of applications based on simple objects that have no environmental assumptions or dependencies. If however a Spring bean does need access to its BundleContext for some reason, then the bean class can implement the org.springframework.osgi.context.BundleContextAware interface. Beans implementing this interface will be injected with their BundleContext when they are instantiated in the application context.</p>


	<h3>2.4 Use of the Context ClassLoader</h3>


	<p>Many useful 3rd-party libraries and applications exist which know nothing about OSGi and rely on the Thread&#8217;s context ClassLoader for the dynamic loading of classes. OSGi does not define what the context ClassLoader will be at any point in time. This fact coupled with OSGi&#8217;s non-hierarchical class loading means that such libraries will not be able to find the types and resources they need.</p>


	<p>Consider a simple example of an enterprise application packaged in bundle A, creating a Hibernate SessionFactory using Hibernate types exported by bundle H. The SessionFactory will need to load application types and resources defined in bundle A, but these are not visible to it in an OSGi environment. The context ClassLoader for any thread that calls from bundle A into bundle H must be set to A&#8217;s bundle ClassLoader in order for this to work.</p>


	<p>The Spring-OSGi support ensures that when activating a bundle, the context ClassLoader is always set to a ClassLoader that can see the resources of the bundle being activated. Thus calls to libraries made during bean instantiation and configuration will always be made in the context of an appropriate context ClassLoader.</p>


	<p>It is also possible to request Spring to manage the context ClassLoader on calls made to OSGi services, and for the invocation of operations on beans exposed as OSGi services. See section 3 for more details on this support.</p>

	<h4>2.4.1 Other contexual access</h4>


	<p>A Spring bean can implement the BundleContextAware interface to be injected with a reference to the BundleContext of the bundle in which it resides. During bundle activation and whenever invoking an OSGi service accessed as a Spring bean, Spring will also provide access to the &#8220;current&#8221; bundle&#8217;s BundleContext through a ThreadLocal variable, accessible via <code>LocalBundleContext.getContext</code>.</p>


	<h3>2.5 Web application support</h3>


	<p>Spring uses a <code>ServletContextListener</code>, <code>org.springframework.web.context.ContextLoaderListener</code> to automatically create a <code>WebApplicationContext</code> for web applications. An OSGi enabled version of WebApplicationContext, <code>org.springframework.osgi.context.support.WebApplicationContext</code> is provided for use with web applications running inside OSGi. To use this support, set the <code>contextClass</code> parameter of the listener declaration in your web.xml file to &#8220;org.springframework.osgi.context.support.WebApplicationContext&#8221;.</p>


	<h2>3.0 Services and the dynamic nature of the OSGi platform</h2>


	<p>OSGi is a <em>dynamic</em> platform: bundles may be installed, started, updated, stopped, and uninstalled at any time during the running of the framework. In this section we explore what this means from the perspective of an application context and the services it publishes and accesses.</p>


	<p>When an active bundle is <em>stopped</em>, any services it exported during its lifetime are automatically unregistered and the bundle returns to the <em>resolved</em> state. A stopped bundle should release any resources it has acquired and terminate any threads. Packages exported by a stopped bundle continue to be available to other bundles.</p>


	<p>A bundle in the resolved state may be uninstalled: packages that were exported by an uninstalled bundle continue to be available to bundles that imported them (but not to newly installed bundles).</p>


	<p>A bundle in the resolved state may also be <em>updated</em>. The update process migrates from one version of a bundle to another version of the same bundle.</p>


	<p>Finally of course a resolved bundle can be started, which transitions it to the <em>active</em> state.</p>


	<p>The OSGi PackageAdmin refreshPackages operation refreshes packages across the whole OSGi framework or a given subset of installed bundles. During the refresh, an application context in an affected bundle will be stopped and restarted. After a refreshPackages operation, packages exported by older versions of updated bundles, or packages exported by uninstalled bundles, are no longer available. Consult the OSGi specifications for full details.</p>


	<h3>3.1 Starting and stopping bundles defining application contexts</h3>


	<p>When a bundle containing Spring resources is activated an application context for the bundle will automatically be created (see section 2.1). When such a bundle is subsequently stopped, the application context will be closed and destroyed. Any singleton beans in the context implementing the DisposableBean interface or specifying a destroy-method in their configuration will receive notification. When the application context is closed, all OSGi services exported by the bundle are unregistered.</p>


	<h3>3.2 OSGi Services</h3>


	<p>An OSGi service is an object published in OSGi&#8217;s service registry, supporting an advertised interface. A service can also be published with a set of queryable properties.</p>


	<p>OSGi services are dynamic in nature and therefore applications using services need to have mechanisms for dealing with this. OSGi provides several different mechanisms for dealing with dynamic services, including the Declarative Services (DS) specification.</p>


	<p>When using DS, a <em>service component</em> is activated when all of its dependencies are satisfied, and may be configured with simple property values (primitive types, string values and arrays or vectors of these) and with references to published OSGi services. A component itself may be registered as an OSGi service  under a given interface implemented by the component.</p>


	<p>Service components are similar to Spring beans in that they are backed by simple Java objects and have their dependencies injected. Compared to Spring beans however the dependency injection support is very limited, and there is no support for any of the higher-order functions that Spring makes available for beans such as <span class="caps">AOP</span>, declarative transactions, security, management, exporting and importing to destinations other than OSGi services, and so on. It is also not possible to assemble together a set of service components within a bundle without also exporting any injected service references as full OSGi services. Spring allows full configuration and assembly of beans within a bundle, but does not require a bean to be exported outside of a bundle simply for another bean in the same bundle to use it. Thus a distinction can be made between public (exported) and private (non-exported) beans.</p>


	<p>DS requires (quite reasonably!) that services be packaged as OSGi-specific service components and configured using OSGi-syntax. When using OSGi services<br />in conjunction with Spring this is potentially confusing to users, as there is overlap between DS concepts and syntax and Spring beans.</p>


	<p>The Spring-OSGi support is able to manage dependencies between services declared<br />in Spring application contexts and can support the same delayed activation semantics as DS. Spring also fully supports the dynamic publishing and accessing of services. Spring-OSGi enabled bundles can co-exist happily with bundles using DS, but for new bundle development we recommend the use of the Spring OSGi support in place of DS.</p>


	<p>The Spring approach is to provide a simple and consistent programming model both inside and outside of the OSGi environment. This facilitates testing outside of OSGi and makes it easier for enterprise Java developers not familiar with the intricacies of the OSGi programming model to become productive quickly. At the same time, if an application does need to work directly with OSGi for advanced features this is supported.</p>


	<h3>3.3 Using OSGi services</h3>


	<p>The &lt;osgi:reference&gt; element is used to define a local bean that acts as a proxy to an OSGi service (or set of services). The only required attributes are <em>id</em> (which defines the name of the local bean) and <em>interface</em> (which defines the fully qualified name of the interface that the target service is registered under).</p>


	<p>For example, to define a local bean representing the MessageService service you would specify:</p>


<pre>
&lt;osgi:reference id="messageService" 
         interface="com.xyz.messaging.MessageService"/&gt;
</pre>

	<p>The <em>filter</em> attribute can be used to specify an optional OSGi framework filter expression that further constrains the set of target services.</p>


	<p>The optional <em>depends-on</em> attribute ensures that the named dependency is instantiated before the reference bean.</p>


	<p>The optional <em>cardinality</em> attribute allows a reference cardinality to be specified (0..1, 1..1, 0..n, or 1..n). The default is &#8220;1..1&#8221;. For references with cardinality 0..1 or 1..1 the &lt;osgi:reference&gt; element resolves to a bean of the interface type specified in the interface attribute. For references with cardinality 0..n or 1..n, the &lt;osgi:reference&gt; element resolves to a <em>Collection</em> with elements of the interface type.</p>


	<p>Consider the following fragment of configuration:</p>


<pre>
&lt;osgi:reference id="messageService" interface="MessageService"/&gt;

&lt;osgi:reference id="listeners" interface="MyEventListener" 
    cardinality="0..n"/&gt;

&lt;bean id="myBean" class="SomeClass"&gt;
  &lt;property name="messageService" ref="messageService"/&gt;

  &lt;property name="eventListeners" ref="listeners"/&gt;
&lt;/bean&gt;
</pre>

	<p>The class &#8220;SomeClass&#8221; backing &#8220;myBean&#8221; would be defined as follows:</p>

<pre>
public class SomeClass {
  private MessageService msgService;
  private Collection&lt;MyEventListener&gt; listeners;

  public void setMessageService(MessageService aService) {
    this.msgService = aService;
  }

  public void setEventListeners(Collection&lt;MyEventListener&gt; listeners) {
    this.listeners = listeners;
  }

  // ...
}
</pre>

	<p>Note: the raw type Collection can also be used in place of Collection&lt;MyEventListener&gt;, the Spring-OSGi support does not require Java 5.</p>

	<h4>3.3.1 Binding and unbinding service references</h4>


	<p>Spring gives you a constant object reference for the bean defined by an &lt;osgi:reference&gt; (either a proxy to the target service for 0..1 or 1..1 cardinalities, or a Spring-managed collection for 0..n and 1..n cardinalities). The services behind this reference may come and go dynamically.</p>


	<p>For service references held in a collection, invocation of the <code>iterator()</code> operation results in an instance of <code>Iterator</code> being returned that iterates over a constant set of references (the matching references at the time the <code>iterator()</code> operation was invoked). The members of the collection may change at any time, so subsequent iterations over the collection (for example) may see different members.</p>


	<p>Invoking an operation on a service reference may fail at any time with an unchecked ServiceUnavailableException (the bundle providing the service may be stopped for example). By specifying the <em>timeout</em> attribute in the &lt;osgi:reference&gt; element Spring can be configured to wait up to a given number of milliseconds for a service to become available before failing. The default behaviour is not to fail immediately (i.e. no timeout period) if a required service is not available.</p>


	<p>For example:</p>

<pre>
&lt;osgi:reference 
   id="messageService" 
   interface="MessageService" 
   timeout="3000"/&gt;
</pre>

	<p>For <em>optional</em> service references (those with cardinality 0..1 or 0..n) the <em>oneway</em> attribute may also be set to &#8220;true&#8221; (the default is false). An invocation of an operation with a void return type via a service reference with cardinality 0..1 will <strong>not</strong> throw a ServiceUnavailableException if a target service is unavailable at the time of invocation. Likewise an operation on a service reference obtained by iterating over the collection of an &lt;osgi:reference&gt; bean with cardinality 0..n will <strong>not</strong> throw a ServiceUnavailableException if the operation signature has a void return type and the target service becomes unavailable before the operation is invoked.</p>


	<p>For <em>stateless</em> services, this level of support may well be sufficient. In-between operation invocations, the target service may transparently updated. If a target service is unavailable when an operation is invoked, it can be retried, and only then will a ServiceUnavailableException be thrown.</p>


	<p>For <em>stateful</em> services, or simply for clients that want to be more involved in service tracking, it is possible to explicitly track the availability (or otherwise) of OSGi services backing a service reference by specifying one or more <em>listeners</em> using the nested listener element. The following example shows two listeners registered for a service reference:</p>


<pre>
&lt;osgi:reference id="messageService" interface="MessageService"&gt;
  &lt;osgi:listener ref="aListenerBean"/&gt;
  &lt;osgi:listener ref="anotherListenerBean" 
    bind-method="serviceAvailable" 
    unbind-method="serviceUnavailable"/&gt;
&lt;/osgi:reference&gt;
</pre>

	<p>If neither of the bind-method and unbind-method attributes are specified, then the class named for the bean referenced by the listener must implement Spring&#8217;s TargetSourceLifecycleListener interface. If either of the bind-method or unbind-method attributes are specified then the value of these attributes must be the name of a method in the listener bean class. Spring will invoke the named method when a backing service is bound or unbound as appropriate.</p>


	<p>The signature of a bind or unbind operation must be one of the following:</p>


<pre>
public void some-method-name(
    String serviceBeanName, 
    &lt;ServiceInterfaceType&gt; service)

public void some-method-name(String serviceBeanName, Object service)

public void some-method-name(&lt;ServiceInterfaceType&gt; service)

public void some-method-name(Object service)
</pre>

	<p>When the bind method is invoked, the <code>serviceBeanName</code> parameter (if in use) is passed the name of the &lt;osgi:reference&gt; defined bean that is being bound (e.g. &#8220;messageService&#8221;). The <code>service</code> parameter is the (unchanged) service reference that proxies the target service. The bind method will be called whenever the target service is updated, including the initial binding of the target service.</p>


	<p>Listeners defined for an &lt;osgi:reference&gt; element with cardinality 0..n or 1..n will be invoked every time a service is added to or removed from the collection of tracked references.</p>


	<p>Spring will delay the creation of an application context with non-optional service references (&lt;osgi:reference&gt; beans with cardinality 1..1 or 1..n) until those references are satisfied. However, Spring will <strong>not</strong> automatically destroy an application context if its non-optional service dependencies subsequently become unsatisfied. If a service is truly critical to the functioning of an application context such that the context cannot continue without it, then a listener bean for the service reference can implement <code>ConfigurableApplicationContextAware</code> and invoke the <code>refresh</code> operation on the injected application context object in its unbind method. Calling refresh will destroy all disposable beans in the application context and cause it to be refreshed once all non-optional service references are satisified again.</p>


	<h4>3.3.2 References to services obtained via service factories</h4>


	<p>OSGi services may be backed by a <code>ServiceFactory</code>. When a service is provided by a service factory, each bundle requesting a reference to the service gets its own unique service instance. In order to support client configuration of the service created by the factory, Spring supports <em>property</em> elements nested inside of an &lt;osgi:reference&gt;. A target service backing the service reference will be dependency injected by Spring with the given properties. This injection happens every time a target service is bound to the service reference.</p>


	<p><em>Note: use of nested property elements with services that are not backed by a ServiceFactory is discouraged. Ideally we would prevent this, but OSGi does not provide sufficient runtime metadata about a service to know.</em></p>


	<h4>3.3.3 Context ClassLoader management</h4>


	<p>OSGi does not define what types will be visible through the context ClassLoader when a client bundle invokes an operation on a service published by another bundle. (<em>Note: future versions of the OSGi specification may make some guarantees in this regard</em>). For many enterprise libraries that expect to make use of the context ClassLoader to load types and resources, leaving the context ClassLoader undefined is unacceptable. By default Spring ensures that the context ClassLoader has visibility of types and resources in the <em>service invoking bundle</em> when an operation is invoked on a service obtained via an &lt;osgi:reference&gt;. When the service operation has completed the context ClassLoader is restored to whatever value it had prior to the invocation.</p>


	<p>Management of the context ClassLoader can be controlled using the <em>context-classloader</em> attribute of the &lt;osgi:reference&gt; element. The default value is <code>client</code>, which specifies the behaviour described above. Setting the attribute to <code>service-provider</code> ensures that the ContextClassLoader has visibility of types and resources in the <em>service providing bundle</em> when the operation is invoked. Setting the attribute to <code>unmanaged</code> means that Spring will not attempt to manage the context ClassLoader at all.</p>


	<h3>3.4 Exporting Spring beans as OSGi services</h3>


	<p>Any bean defined in an application context may be exported (registered) as an OSGi service. It will be automatically unregistered when the application context is stopped.</p>


	<p>A bean is registered as an OSGi service using the &lt;osgi:service&gt; element. The <em>ref</em> attribute names the bean to be registered, and the <em>interface</em> attribute defines the interface type the bean is to be registered under. For example:</p>


<pre>
&lt;osgi:service ref="myBean" interface="com.xyz.MessageService"/&gt;
</pre>

	<p>The &lt;osgi:service&gt; element may optionally include one or more nested <em>service-property</em> elements which define properties used when registering the service.</p>

	<p>In addition to referring to the bean to be exposed by reference, it may also be defined as an anonymous inner bean of the &lt;osgi:service&gt; element. For example:</p>


<pre>
&lt;osgi:service interface="com.xyz.MessageService"&gt;
  &lt;bean class="MessageServiceProvider"&gt;
    &lt;!-- ... --&gt;

  &lt;/bean&gt;
&lt;/osgi:service&gt;
</pre>

	<p>If the <code>lazy-init</code> attribute is set to <code>true</code> then the service will not be created until it is referenced.</p>

	<p>If the bean exposed as a service implements the OSGi <code>ServiceFactory</code> interface then OSGi will invoke the operations defined on that interface to ensure that each requesting bundle gets its own unique service instance.</p>


	<p>As an alternative to implementing the OSGi <code>ServiceFactory</code> interface, the bean may implement Spring&#8217;s <code>FactoryBean</code> interface. If the <code>singleton</code> property of the factory bean is set to true, then all clients of the service will see the same service instance, but the service itself will not be created until it is referenced. If the <code>singleton</code> property is set to false then the <code>getObject</code> operation of the factory bean will be invoked once for each unique requesting bundle. If the service object returned by the <code>getObject</code> operation of a non-singleton factory implements <code>DisposableBean</code> then the destroy method of the returned service object will be invoked when all references to it from its associated (client) bundle have been released.</p>


	<h4>3.4.1 Context ClassLoader management</h4>


	<p>OSGi does not define what types will be visible through the context ClassLoader when a service operation executes. (<em>Note: future versions of the OSGi specification may make some guarantees in this regard</em>). Spring can manage the context ClassLoader for the execution of operations on &lt;osgi:service&gt; defined beans. The &lt;osgi:service&gt; element supports a <code>context-classloader</code> attribute that by default is set to <code>unmanaged</code> (Spring does not perform any additional context ClassLoader management for the execution of a service). Setting this attribute to <code>service-provider</code> causes Spring to ensure that the types and resources of the service publishing bundle are available via the context ClassLoader when the service executes. When the service execution has completed, the context ClassLoader is restored to whatever value it had prior to the execution.</p>


	<p>Note: setting context-class-loader=&#8221;service-provider&#8221; will override any context ClassLoader that may have been set on an invocation of that service via an &lt;osgi:reference&gt; defined bean.</p>


	<h2>4.0 The OSGi Configuration Admin service</h2>

	<p>Spring provides support for bean property values to be externalized from Spring configuration files and retrieved from an alternate source. For example, the Spring PropertyPlaceholderConfigurer class can be used to replace escaped property values with values loaded from a properties file.</p>


	<p>Spring OSGi provides additional support for sourcing bean property values from the OSGi Configuration Admin Service. To enable this support, define one or more propertyPlaceholder elements inside the Spring configuration (if using more than one, each must be configured with a unique delimiter string). For example:</p>


<pre>
  &lt;osgi:property-placeholder persistent-id="com.xyz.myapp"/&gt;
</pre>

	<p>Where &#8220;persistent-id&#8221; is the OSGi <span class="caps">PID</span> used as the key for the configuration data.  The default delimiter is &#8221;${...}&#8221; so for example a property with value</p>


<blockquote>
	<p>&#8221;${timeout}&#8221;</p>

</blockquote>




	<p>would be replaced with the value of the &#8220;timeout&#8221; property held by the configuration admin service under the supplied <span class="caps">PID</span>. If the &#8220;update&#8221; attribute is set to true then singleton beans will have new property values re-injected if changes are made to configuration settings via the admin service. Re-injection is only supported for method-based injection (not constructor).</p>


	<p>The optional <code>default-properties</code> attribute can be set to the name of a bean (of type java.util.Properties or java.util.Map) that provides default property values to be used if the configuration admin service does not have a matching definition for a referenced property.</p>


	<p>See the Spring osgi schema reference for full details of the property-placeholder element.</p>


	<h3>4.1 Atomic updates</h3>


	<p>A bean with several properties set via the configuration admin service and using the &#8220;update&#8221; facility will see multiple property updates (one for each changed property) when a set of related changes are made to the configuration.</p>


	<p>The &lt;osgi:config&gt; element defines a bean of type <code>Map</code> containing all of the properties registered under the given persistent-id.</p>


<pre>
  &lt;osgi:config id="myAppProperties" persistent-id="com.xyz.myapp"/&gt;
</pre>

	<p>It supports zero or more nested <code>config-listener</code> elements that are used to define listener beans to be notified when the contents of the Map changes.  The <code>update-method</code> attribute of <code>config-listener</code> is mandatory. The value of this attribute is the name of the method in the referenced listener bean to be invoked when the configuration changes. For example:</p>


<pre>
  &lt;osgi:config id="myAppProperties" persistent-id="com.xyz.myapp"&gt;
    &lt;osgi:config-listener ref="aListenerBean" 
          update-method="setApplicationProperties"/&gt;
  &lt;/osgi:config&gt;
</pre>

	<p>The method named in the <code>update-method</code> attribute must have a signature  with one of the following forms:</p>


<blockquote>
	<p>public void update_method_name(java.util.Map properties)</p>

</blockquote>




	<p>or</p>


<blockquote>
	<p>public void update_method_name(String pid, java.util.Map properties)</p>

</blockquote>




	<p>The second form is intended for use with <em>managed service factories</em> (see section 104.6 of the OSGi services compendium). If the <code>persistent-id</code> specified for an &lt;osgi:config&gt; element is actually a factory <span class="caps">PID</span> for configuration information managed by an <code>ManagedServiceFactory</code> then the update-method will be invoked once for each set of properties registered under the factory <span class="caps">PID</span>.</p>


	<h2>5.0 Provisioning</h2>


	<p>OSGi does <strong>not</strong> automatically provision (install and start) bundles providing services needed by another bundle. Spring provides basic support for creating a provisioning bundle. More sophisticated provisioning function (perhaps in conjunction with Felix&#8217;s <span class="caps">OBR</span>) may be supported in future releases.</p>

	<p>The osgi:bundle and osgi:virtual-bundle configuration elements define beans that represent OSGi bundles. A basic provisioning service can therefore be implemented by:</p>


	<ol>
	<li>installing and starting the OSGi Spring extender bundle</li>
		<li>installing and starting a &#8220;Spring&#8221; bundle with an application context configuration file that declares &lt;osgi:bundle&gt; and &lt;osgi:virtual-bundle&gt; bean declarations</li>

	</ol>


	<p>From this point, Spring will manage the bring-up of the rest of the needed OSGi bundles.</p>


	<h3>5.1 The osgi:bundle element</h3>


	<p>The &lt;osgi:bundle&gt; element can be used to define a bean to the application context that represents another osgi bundle (the resulting bean is of type org.osgi.framework.Bundle). In its simplest form it can be used as follows:</p>


<pre>
 &lt;osgi:bundle symbolic-name="com.xyz.myapp.service"/&gt;
</pre>

	<p>If the location property is also set then the bundle will be installed if it is not already. If the &#8220;start&#8221; property is set to true, then the bundle will also be started if it is not already started.</p>


<pre>

  &lt;osgi:bundle symbolic-name="com.xyz.myapp.service" 
               location="http://.....some-url" 
               start="true"/&gt;
</pre>

	<h3>5.2 Virtual bundles</h3>


	<p>The &lt;osgi:virtual-bundle&gt; supports the creation of bundles on the fly from jar-based artifacts. The virtual bundle mechanism allows users to manipulate all of the standard headers interpreted by OSGi. For example:</p>

<pre>
  &lt;osgi:virtual-bundle id="bundleA" depends-on="bundleB" 
  location="file:bundleA.jar" state="start" 
  version="1.0" group-id="com.me.bundles" artifact-id="bundleA"&gt;
  &lt;exports
    &lt;list&gt;
          &lt;value&gt;com.me.bundles.bundleA&lt;/value&gt;
    &lt;/list&gt;

  &lt;/exports&gt;
  &lt;imports&gt;
    &lt;list&gt;
         &lt;value&gt;com.me.bundles.bundleB&lt;/value&gt;
    &lt;/list&gt;

  &lt;/imports&gt;
  &lt;/osgi:virtual-bundle&gt;
</pre>

	<p>The location attribute is also allowed to be a maven pom.xml file, in<br />which case the appropriate versioning information will be taken from<br />the pom and the appropriate jar accessed using information in the pom.</p>


	<h3>5.3 Future Provisioning Support</h3>


	<p>Providing an explicit list of bundles to be installed and started assumes knowledge of which bundles export which packages and provide which services. In the future provisioning support may be developed that examines the packages needed (imported) by a bundle, and the services referenced by a bundle, and automatically installs and starts bundles that meet those requirements. Such support is out of scope for the current release.</p>


	<h2>6.0 Integration testing</h2>


	<p>The Spring framework has always promoted test-driven development and made it easy to write good unit and integration tests. Unit testing of OSGi applications presents no special requirements &#8211; simply test your application classes in isolation. It is unlikely that an application class has any dependency on OSGi. If an application class is, for example, BundleContextAware, then the OSGi Bundle and BundleContext interfaces are easy to mock up.</p>


	<p>For integration testing (execution of tests within a running OSGi environment) some assistance is required. A recommended best practice is to develop the integration test suite for a bundle in a separate test bundle. Given a bundle &#8220;com.xyz.myapp.service&#8221; you might choose to place the integration tests in a bundle &#8220;com.xyz.myapp.service.tests&#8221; for example. Spring will provide an AbstractOsgiTests base class that makes it easy to start up an OSGi environment, and install and start the necessary bundles needed to run a test. It ensures that each test run occurs in a clean OSGi environment, and allows tests to be easily run against any supported OSGi provider (we&#8217;ll look at equinox, knopflerfish, and Felix). The OsgiAdapter interface will enable support for additional OSGi providers not supported out-of-the-box to be added.</p>


	<p>_Update: Knopplerfish provides an integration harness for OSGi that seems to meet many of the requirements, and is not tied to the Knopplerfish implementation. This could be adopted as the integration testing vehicle. See <a href="https://www.knopflerfish.org/svn/knopflerfish.org/trunk/osgi/bundles_opt/junit/readme.txt_">Knopplerfish testing support</a></p>


	<p>Note that the Eclipse <span class="caps">IDE</span> has excellent support for running bundle-based tests, but this is tied to equinox and to the Eclipse <span class="caps">IDE</span>, whereas Spring needs to support multiple OSGi providers, multiple IDEs, and continuous integration builds via maven and ant.</p>


	<h2>7.0 Developing web applications with Spring and OSGi</h2>


	<p>Martin Lippert and Gerd Wutherich already have the sandbox Spring OSGi code running inside a web application using the servlet container embeddable equinox support created by the server-side equinox incubator project. The Spring OSGi project targets enterprise applications, of which web applications form a large part. We will therefore be making sure that Spring web applications can be easily written and deployed using OSGi as the underlying infrastructure. This support will be based initially on the equinox incubator, and then broadened to support other OSGi providers if possible.</p>


	<p>A sample application will be developed to show the support working in the context of a realistic web application.</p>


	<h2>8.0 Management of OSGi applications</h2>


	<p>For enterprise applications it is desirable to be able to manage an OSGi enviroment via <span class="caps">JMX </span>(list bundles, install/uninstall/start/stop/update etc.). If this support does not prexist (I haven&#8217;t searched yet) then Spring will provide an OSGi bundle that enables <span class="caps">JMX</span>-based management of OSGi using the Spring <span class="caps">JMX</span> support.</p>


	<h2>9.0 Packaging Spring as OSGi bundles</h2>


	<p>To support the development of Spring applications based on OSGi, it is necessary to ship Spring itself as a set of OSGi bundles (jar files). This means ensuring that all the necessary manifest entries are present in the Spring jars. This work will be done in the Spring 2.1 timeframe. Each of the jars shipped in &#8220;dist/modules&#8221; of the Spring distribution will be shipped as a valid OSGi bundle (the OSGi manifest entries are harmless when using the jars outside of an OSGi environment). A new listener jar will also be provided with functionality already described.</p>


	<p>All resource loading and class loading should, wherever possible, be done using the bundle classloader, and not via the context classloader. When an application context is created inside an OSGi bundle the bundle classloader is set as the application context classloader, and the the ResourceLoader interface supported by the ApplicationContext is also implemented on top of the OSGi services. As of Spring 2.0-rc2 this is sufficient to load all Spring dependent classes and resources using this mechanism.</p>


	<h2>10.0 Support for deploying Spring applications into an OSGi environment</h2>


	<p><span class="caps">TODO</span>: describe maven plugin / ant task / SpringIDE extensions to allow easy packaging of a Spring application as an OSGi bundle or set of bundles.</p>


	<h2>Appendix A. Deploying existing application code to OSGi</h2>

	<p>It is likely that existing application code (especially frameworks and libraries) will be deployed in an OSGi environment after only minimal intervention to turn jar files into valid OSGi bundles (there are ant and maven tasks to assist in this process for example). Because the classloading and isolation properties of OSGi are different than that typically encountered in enterprise applications, this raises a number of issues to be aware of.</p>


	<ul>
	<li>Resources in <span class="caps">META</span>-INF cannot be directly accessed across bundles through the classloader. Spring&#8217;s resource loading abstraction handles this issue for Spring-based resource loading by the following algorithm:<br />> 1. Find the owning bundles of all exported packages that are imported by the requesting Bundle (this is done via the PackageAdmin service)<br />> 2. Delegate the request to Bundle.getEntry for each contributing bundle<br />> 3. Aggregate and return the results</li>

	</ul>


	<ul>
	<li>A framework or library cannot rely on the context class loader to gain visibility of application types. This results in ClassNotFoundExceptions if a library tries to load an application type via reflection. In equinox the ContextFinder mechanism provides a work-around for this issue. On other platforms this mechanism is not yet supported. (Equinox also supports a &#8220;buddy&#8221; mechanism that provides another solution to this issue). We will investigate the use of Spring <span class="caps">AOP</span> to set an appropriate context class loader around the execution of bean operations for use when the underlying OSGi platform does not provide a native solution. Such a classloader would also support the &#8220;resources in <span class="caps">META</span>-INF&#8221; resolution strategy outlined above.</li>

	</ul>


	<h2>Appendix B. spring-osgi.xsd</h2>


<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;

&lt;xsd:schema xmlns="http://www.springframework.org/schema/osgi" 
            xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
            xmlns:beans="http://www.springframework.org/schema/beans" 
            targetNamespace="http://www.springframework.org/schema/osgi" 
            elementFormDefault="qualified" 
            attributeFormDefault="unqualified"&gt;

  &lt;xsd:import namespace="http://www.springframework.org/schema/beans"/&gt;

  &lt;!-- reference --&gt;
  &lt;xsd:element name="reference" type="Treference"/&gt;

  &lt;xsd:complexType name="Treference"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="beans:identifiedType"&gt;

        &lt;xsd:sequence minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xsd:element name="property" type="beans:propertyType" minOccurs="0"/&gt;
          &lt;xsd:element name="listener" type="Tlistener" minOccurs="0"/&gt;
         &lt;/xsd:sequence&gt;
         &lt;xsd:attribute name="interface" use="required" type="xsd:string"/&gt;
         &lt;xsd:attribute name="filter" use="optional" type="xsd:string"/&gt;

         &lt;xsd:attribute name="cardinality" use="optional" type="Tcardinality" default="1..1"/&gt;
         &lt;xsd:attribute name="timeout" use="optional" type="xsd:int" default="0"/&gt;
         &lt;xsd:attribute name="depends-on" type="xsd:string" use="optional"/&gt;
         &lt;xsd:attribute name="context-classloader" 
                        type="TreferenceClassLoaderOptions" default="client"/&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;

  &lt;/xsd:complexType&gt;

  &lt;xsd:simpleType name="Tcardinality"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="0..1"/&gt;
      &lt;xsd:enumeration value="0..n"/&gt;
      &lt;xsd:enumeration value="1..1"/&gt;

      &lt;xsd:enumeration value="1..n"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;

  &lt;xsd:simpleType name="TreferenceClassLoaderOptions"&gt;
    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="client"/&gt;

      &lt;xsd:enumeration value="service-provider"/&gt;
      &lt;xsd:enumeration value="unmanaged"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;

  &lt;xsd:complexType name="Tlistener"&gt;
    &lt;xsd:attribute name="ref" type="xsd:string" use="required"/&gt;

    &lt;xsd:attribute name="bind-method" type="xsd:string" use="optional"/&gt;
    &lt;xsd:attribute name="unbind-method" type="xsd:string" use="optional"/&gt;
  &lt;/xsd:complexType&gt;

  &lt;!-- service --&gt;
  &lt;xsd:element name="service" type="Tservice"/&gt;

  &lt;xsd:complexType name="Tservice"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="beans:identifiedType"&gt;
        &lt;xsd:sequence minOccurs="0" maxOccurs="1"&gt;
          &lt;xsd:element name="interfaces" type="beans:listOrSetType" minOccurs="0"/&gt;
          &lt;xsd:element name="service-properties" type="beans:propsType" minOccurs="0"/&gt;

          &lt;!--  this next entry is to allow a nested bean element --&gt;
          &lt;xsd:any namespace="##other" minOccurs="0" maxOccurs="1" processContents="skip"/&gt;
        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="ref" type="xsd:string" use="optional"/&gt;
        &lt;xsd:attribute name="interface" type="xsd:string" use="optional"/&gt;
        &lt;xsd:attribute name="lazy-init" type="xsd:boolean" use="optional" default="false"/&gt;

        &lt;xsd:attribute name="depends-on" type="xsd:string" use="optional"/&gt;
        &lt;xsd:attribute name="context-classloader" 
                       type="TserviceClassLoaderOptions" default="unmanaged"/&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:simpleType name="TserviceClassLoaderOptions"&gt;

    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="service-provider"/&gt;
      &lt;xsd:enumeration value="unmanaged"/&gt;
    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;

  &lt;!-- property placeholder --&gt;

  &lt;xsd:element name="property-placeholder" type="TpropertyPlaceholder"/&gt;

  &lt;xsd:complexType name="TpropertyPlaceholder"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="beans:identifiedType"&gt;
        &lt;xsd:attribute name="persistent-id" type="xsd:string" use="required"/&gt;
        &lt;xsd:attribute name="placeholder-prefix" type="xsd:string" use="optional" default="${"/&gt;

        &lt;xsd:attribute name="placeholder-suffix" type="xsd:string" use="optional" default="}"/&gt;
        &lt;xsd:attribute name="default-properties" type="xsd:string" use="optional"/&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;!-- config object --&gt;

  &lt;xsd:element name="config" type="Tconfig"/&gt;

  &lt;xsd:complexType name="Tconfig"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="beans:identifiedType"&gt;
        &lt;xsd:sequence minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xsd:element name="config-listener" type="TconfigListener"/&gt;

        &lt;/xsd:sequence&gt;
        &lt;xsd:attribute name="persistent-id" type="xsd:string" use="required"/&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:complexType name="TconfigListener"&gt;

    &lt;xsd:attribute name="ref" type="xsd:string" use="required"/&gt;
    &lt;xsd:attribute name="update-method" type="xsd:string" use="required"/&gt;
  &lt;/xsd:complexType&gt;

  &lt;!-- bundle --&gt;
  &lt;xsd:element name="bundle" type="Tbundle"/&gt;

  &lt;xsd:complexType name="Tbundle"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="beans:identifiedType"&gt;
        &lt;xsd:attribute name="symbolic-name" type="xsd:string" use="optional"/&gt;
        &lt;xsd:attribute name="depends-on" type="xsd:string" use="optional"/&gt;
        &lt;xsd:attribute name="location" type="xsd:string" use="optional"/&gt;

        &lt;xsd:attribute name="state" type="Tstate" use="optional"/&gt;
        &lt;xsd:attribute name="start-level" type="xsd:int" use="optional" default="0"/&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:simpleType name="Tstate"&gt;

    &lt;xsd:restriction base="xsd:string"&gt;
      &lt;xsd:enumeration value="start"/&gt;
      &lt;xsd:enumeration value="stop"/&gt;
      &lt;xsd:enumeration value="install"/&gt;
      &lt;xsd:enumeration value="uninstall"/&gt;
      &lt;xsd:enumeration value="update"/&gt;

    &lt;/xsd:restriction&gt;
  &lt;/xsd:simpleType&gt;

  &lt;!-- virtual-bundle --&gt;
  &lt;xsd:element name="virtual-bundle" type="TvirtualBundle"/&gt;

  &lt;xsd:complexType name="TvirtualBundle"&gt;

    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="Tbundle"&gt;
        &lt;xsd:all&gt;
          &lt;xsd:element name="imports" type="TpackageList" minOccurs="0"/&gt;
          &lt;xsd:element name="exports" type="TpackageList" minOccurs="0"/&gt;
          &lt;xsd:element name="dynamic-imports" type="TpackageList" minOccurs="0"/&gt;

        &lt;/xsd:all&gt;
        &lt;xsd:attribute name="version" type="xsd:string" use="optional"/&gt;
        &lt;xsd:attribute name="group-id" type="xsd:string" use="optional"/&gt;
        &lt;xsd:attribute name="artifact-id" type="xsd:string" use="optional"/&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;

  &lt;/xsd:complexType&gt;

  &lt;xsd:complexType name="TpackageList"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element name="package" type="Tpackage" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:complexType name="Tpackage"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element name="uses" type="TpackageList" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xsd:sequence&gt;
    &lt;xsd:attribute name="name" type="xsd:string" use="required"/&gt;
    &lt;xsd:attribute name="version" type="xsd:string" use="optional"/&gt;

  &lt;/xsd:complexType&gt;

&lt;/xsd:schema&gt;
</pre>

	<h2>Appendix C. Acknowledgements</h2>


	<p>Thanks to Peter Kriens, Jeff McAffer, Richard S. Hall, Andy Piper, Hal Hildebrand, Glyn Normington, Martin Lippert, Gerd Wuetherich, Bill Gallagher, <span class="caps">BJ </span>Hargrave, and Olivier Gruber for their contributions in the development of this specification.</p>

  </div>

  <ul class="links inline"><li class="comment_forbidden first last"></li>
</ul>
</div></div> <!-- /node-inner, /node -->


            </div>
    </div>
        </td>

        <td width="50px">&nbsp;</td>
        <td width="310px" valign="top" align="left">

              <!--[If IE 7]><br><![endif]-->
      <div style="margin-top:-40px;">
      <div align="right">

	  <p style="line-height:26px;">&nbsp;</p>
	  <p>

      </p>
      </div>

	              
      
       
        
        
        
        </div>
        </td>

        </tr>
        </table>


        
      </div></div><!-- /.section, /#content -->


      
      
    </div></div><!-- /#main, /#main-wrapper -->

<div style="background-color:#252525;margin-top:-14px;">
         <div id="footer"><div class="section">


        <div class="region region-footer">
  <div id="block-block-23" class="block block-block first region-odd odd region-count-1 count-1"><div class="block-inner">

  
  <div class="content">
    <style type="text/css">
#communities{position:relative;}
#communities li{margin:0;padding:0;list-style:none;position:absolute;top:0;}
#communities li, #communities a{height:69px;display:block;}

#cf{left:0px;width:260px;}
#cf{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat 0 0;}
#cf a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat 0 0;}

#grails{left:275px;width:120px;}
#grails{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -275px 0;}
#grails a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -275px 0;}

#groovy{left:400px;width:100px;}
#groovy{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -400px 0;}
#groovy a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -400px 0;}

#hyperic{left:500px;width:170px;}
#hyperic{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -500px 0;}
#hyperic a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -500px 0;}

#rabbit{left:670px;width:140px;}
#rabbit{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -670px 0;}
#rabbit a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -670px 0;}

#wm{left:810px;width:170px;}
#wm{background:url('http://springsource.org/files/footer/communities_off.png') no-repeat -810px 0;}
#wm a:hover{background: url('http://springsource.org/files/footer/communities_on.png') no-repeat -810px 0;}

#communities_bg {background-color:#181818;height:69px;padding:1px 10px 15px 10px;border-radius:5px;margin:10px 0 27px 0}

#communities_title {color: #CCC;font-size: 18px;font-weight: 300;padding-bottom: 15px;line-height: 24px;text-shadow: 0 1px 0 black;margin-left:10px}

</style>

<p>&nbsp;</p>
<table style="margin: 0 10px 0 10px;">

<tr valign="top">
    <span id="communities_title">Other Communities</span>
</tr>
<tr valign="top">
    <div id="communities_bg">
        <ul id="communities">
            <li id="cf" style="margin-left: 30px;"><a href="http://www.cloudfoundry.org" target="_blank"></a></li>
            <li id="grails" style="margin-left: 65px;"><a href="http://www.grails.org" target="_blank"></a></li>
            <li id="groovy" style="margin-left: 110px;"><a href="http://groovy.codehaus.org/" target="_blank"></a></li>
            <!--<li id="hyperic"><a href="http://www.hyperic.com/community" target="_blank"></a></li>-->
            <li id="rabbit" style="margin-left: -20px;"><a href="http://www.rabbitmq.com" target="_blank"></a></li>
            <li id="wm"><a href="http://redis.io" target="_blank"></a></li>
        </ul>
    </div>
</tr>

<tr valign="top">
<th class="footerth" style="padding-left:-10px;"><a href="http://www.springsource.org">SpringSource</a></th>

<th class="footerth"><a href="/features">Features</a></th>

<th class="footerth"><a href="/get-started">Get Started</a></th>

<th class="footerth"><a href="/get-involved">Get Involved</a></th>

<th class="footerth"><a href="/projects">Projects</a></th>


</tr>
<tr>
<td valign="top" width="195px">

<span class="footerlist">
<a href="/about">About Us</a><br>
<a href="http://blog.springsource.org">Our Blog</a><br>
<a href="/case-studies">Case Studies</a><br>
<a href="/news-events">Latest News & Events</a><br>
<a href="http://www.vmware.com/jobs/" target="_blank">SpringSource Jobs</a>&nbsp;&nbsp;<a href="http://www.vmware.com/jobs/" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/ICO_PopUp-NewWindow.png"></a><br>
<a href="/consulting">Consulting</a><br>
<!--<a href="http://www.springsource.com/contact" target="_blank">Contact Us</a><br>-->
<a href="/newsletter-subscription">Subscribe to Newsletter</a><br>

</span>

<p style="margin-top:15px;"><a href="/newsletter-subscription">
<img src="http://www.springsource.org/sites/all/themes/s2org11/images/button_home_subscribe.png"></a></p>
</td>


<td valign="top" width="140px">

<span class="footerlist">

<a href="/features/modern-web">Modern Web</a><br>
<a href="/features/data-access">Data Access</a><br>
<a href="/features/integration">Integration</a><br>
<a href="/features/mobile">Mobile</a><br>
<a href="/features/social">Social</a><br>
<a href="/features/security">Security</a><br>
<a href="/features/cloud-ready">Cloud Ready</a><br>
</span>
</td>


<td valign="top" width="160px">

<span class="footerlist">
<a href="/sts">Get Tool Kit (STS)</a> <br>
<a href="/tutorials">Tutorials</a> <br>
<a href="/samples">Code Samples</a> <br>
<a href="/documentation">Documentation</a> <br>
<a href="http://forum.springsource.org">Forums</a> <br>
<a href="http://www.springsource.com/training" target="_blank">Training</a><br>


</span>
</td>


<td valign="top" width="156px">

<span class="footerlist">


<a href="http://forum.springsource.org">Discussions</a><br>
<a href="https://jira.springsource.org" target="_blank">Issue Tracker</a><br>
<a href="https://github.com/SpringSource" target="_blank">Source Repository</a>&nbsp;&nbsp;<a href="https://github.com/SpringSource" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/ICO_PopUp-NewWindow.png"></a><br> 

</span>
</td>

<td valign="top" width="140px">

<span class="footerlist">

<a href="/spring-amqp">Spring AMQP</a><br>
<a href="/spring-android">Spring for Android</a><br>
<a href="/spring-batch">Spring Batch</a><br>
<a href="/spring-data">Spring Data</a><br>
<a href="/spring-framework">Spring Framework</a><br>
<a href="/spring-gemfire">Spring Gemfire</a><br>
<a href="/spring-integration">Spring Integration</a><br>


</span>
</td>

<td valign="top" width="140px">

<span class="footerlist">

<a href="/spring-mobile">Spring Mobile</a><br>
<a href="http://www.springframework.net" target="_blank">Spring .NET</a>&nbsp;&nbsp;<a href="http://www.springframework.net" target="_blank"><img src="http://www.springsource.org/sites/all/themes/s2org11/images/ICO_PopUp-NewWindow.png"></a><br>
<a href="/spring-roo">Spring Roo</a><br>
<a href="/spring-security">Spring Security</a><br>
<a href="/spring-social">Spring Social</a><br>
<a href="/spring-web-flow">Spring Web Flow</a><br>
<a href="/spring-web-services">Spring Web Services</a><br>

</span>
</td>



</tr>
</table>


<div style="background-color:#1e1e1e;width:952;-moz-border-radius: 5px;
    -webkit-border-bottom-left-radius: 5px;
    -webkit-border-bottom-right-radius: 5px;
    border-radius: 5px;">
<center>
<p class="copyright">
<a style="color:#eee;" href="/user">&#169;</a>&nbsp;
<script type="text/javascript">

var d = new Date();
document.write(d.getFullYear());

</script>
SpringSource.
All Rights Reserved.
<a href="http://www.vmware.com/help/legal.html" target="_blank">Terms of Use</a>, 
<a href="http://www.vmware.com/help/privacy.html" target="_blank">Privacy</a> and 
<a href="/trademark_standards">Trademark Standards</a>
</p>
</center>
</div>

<p>&nbsp;</p>
<p>&nbsp;</p>  </div>

  
</div></div> <!-- /block-inner, /block -->
<div id="block-block-7" class="block block-block last region-even even region-count-2 count-2"><div class="block-inner">

  
  <div class="content">
    <!-- Eloqua Img Code Code -->
<script type="text/javascript" src="/sites/all/themes/s2org11/js/elqNow/elqImg.js"></script>
<!-- Begin Google Code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2728886-3");
pageTracker._setDomainName("springsource.org");
pageTracker._setAllowHash(false);
pageTracker._setAllowLinker(true);
pageTracker._trackPageview();
var OrgTracker = _gat._getTracker("UA-2728886-2");
OrgTracker._setDomainName("springsource.org");
OrgTracker._setAllowHash(false);
OrgTracker._setAllowLinker(true);
OrgTracker._trackPageview();
</script>
<!-- End Google Code -->  </div>

  
</div></div> <!-- /block-inner, /block -->
</div><!-- /.region -->

      </div></div>   <!-- /.section, /#footer -->
    <!--  -->
</div>
  </div></div><!-- /#page, /#page-wrapper -->

  
  <script type="text/javascript" src="/sites/all/modules/custom/google_cse/google_cse.js?R"></script>
<script type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "googleCSE": { "language": "en" } });
//--><!]]>
</script>

</body>
</html>
